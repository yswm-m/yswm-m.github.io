<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一生雾梦</title>
  
  <subtitle>一生雾梦の博客</subtitle>
  <link href="https://yswm-m.github.io/atom.xml" rel="self"/>
  
  <link href="https://yswm-m.github.io/"/>
  <updated>2022-09-28T09:50:09.491Z</updated>
  <id>https://yswm-m.github.io/</id>
  
  <author>
    <name>一生雾梦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++设计模式（单例模式）</title>
    <link href="https://yswm-m.github.io/posts/35.html"/>
    <id>https://yswm-m.github.io/posts/35.html</id>
    <published>2022-09-30T02:40:00.000Z</published>
    <updated>2022-09-28T09:50:09.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更多教程笔记请查看我的上一篇文章：点击跳转"><a href="#更多教程笔记请查看我的上一篇文章：点击跳转" class="headerlink" title="更多教程笔记请查看我的上一篇文章：点击跳转"></a>更多教程笔记请查看我的上一篇文章：<a href="https://yswm-m.github.io/posts/7.html">点击跳转</a></h2><h1 id="C-设计模式自学之旅开始！"><a href="#C-设计模式自学之旅开始！" class="headerlink" title="C++设计模式自学之旅开始！"></a>C++设计模式自学之旅开始！</h1><h2 id="本次将介绍C-设计模式里比较基础的模式：单例模式"><a href="#本次将介绍C-设计模式里比较基础的模式：单例模式" class="headerlink" title="本次将介绍C++设计模式里比较基础的模式：单例模式"></a>本次将介绍C++设计模式里比较基础的模式：单例模式</h2><h3>C++的设计模式很早就有了，不过我后面去学Qt了，一直没有时间好好把设计模式过一遍，下次有时间我再更新关于Qt的教程……</h3><h3>据说所有的大公司，软件设计的开发人员，都恨不得给自己写的所有代码都套上设计模式，是否真的有那么玄呢? 今天我们来一探其中的奥秘</h3><h3 id="单例模式代码"><a href="#单例模式代码" class="headerlink" title="单例模式代码:"></a>单例模式代码:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//设计模式-单例模式</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//所谓单例模式就是程序只有一个实例</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token operator">~</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~Singleton() construct"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//提供一个接口来让用户创建对象,让用户只能通过这种方式创建</span>    <span class="token comment">//加上static是因为如果用户没有对象那么就无法创建对象,于是可以把这个接口定义到全局变为静态</span>    <span class="token comment">// static Singleton *CreateObject()</span>    <span class="token comment">// {</span>    <span class="token comment">//     //如果一开始对象的指针是空那么就创建对象</span>    <span class="token comment">//     if (m_pObject == nullptr)</span>    <span class="token comment">//     {</span>    <span class="token comment">//         m_pObject = new Singleton();</span>    <span class="token comment">//     }</span>    <span class="token comment">//     return m_pObject;</span>    <span class="token comment">// }</span>    <span class="token comment">//最安全的写法,不会造成内存泄漏</span>    <span class="token keyword">static</span> Singleton <span class="token operator">&amp;</span><span class="token function">CreateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//创建一个静态成员</span>        <span class="token keyword">static</span> Singleton obj<span class="token punctuation">;</span>        <span class="token comment">//返回这个成员变量,永远只返回这一个</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//如果用户调用拷贝构造函数就直接释放</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span>Singleton <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>    <span class="token comment">//利用运算符重载禁用拷贝构造函数</span>    Singleton <span class="token operator">*</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Singleton <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment">//将构造函数私有化来限制构造函数只允许创建一个对象</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Singleton() construct"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//限制拷贝构造函数 让用户只能用引用来接收 不能用拷贝的方式接收</span>    <span class="token comment">// Singleton(Singleton &amp;obj)</span>    <span class="token comment">// {</span>    <span class="token comment">//     cout &lt;&lt; "Singleton(Singleton&amp; obj) construct" &lt;&lt; endl;</span>    <span class="token comment">// }</span>    <span class="token comment">//定义一个静态对象指针用来判断接口是否只创建了一次对象</span>    <span class="token comment">//静态对象指针只能访问静态的成员函数</span>    <span class="token comment">// static Singleton *m_pObject;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//将静态对象指针声明</span><span class="token comment">// Singleton *Singleton::m_pObject = nullptr;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//当构造函数不公有化了就无法再通过直接创建对象的方式调用构造函数</span>    <span class="token comment">// Singleton s1;</span>    <span class="token comment">// Singleton s2;</span>    <span class="token comment">// Singleton *pObj1 = Singleton::CreateObject();</span>    <span class="token comment">//需要手动释放指针才不会造成内存泄漏</span>    <span class="token comment">// // delete pObj1;</span>    <span class="token comment">// Singleton *pObj2 = Singleton::CreateObject();</span>    <span class="token comment">//安全的写法,返回一个静态成员变量的引用,用引用来接收</span>    Singleton <span class="token operator">&amp;</span>pObj1 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token operator">::</span><span class="token function">CreateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//错误 无法通过拷贝构造接收</span>    <span class="token comment">// Singleton pObj2 = Singleton::CreateObject();</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;更多教程笔记请查看我的上一篇文章：点击跳转&quot;&gt;&lt;a href=&quot;#更多教程笔记请查看我的上一篇文章：点击跳转&quot; class=&quot;headerlink&quot; title=&quot;更多教程笔记请查看我的上一篇文章：点击跳转&quot;&gt;&lt;/a&gt;更多教程笔记请查看我的上一篇文章：&lt;a hre</summary>
      
    
    
    
    <category term="C++" scheme="https://yswm-m.github.io/categories/C/"/>
    
    
    <category term="教程" scheme="https://yswm-m.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="学习" scheme="https://yswm-m.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记" scheme="https://yswm-m.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C++11（lambad表达式）</title>
    <link href="https://yswm-m.github.io/posts/34.html"/>
    <id>https://yswm-m.github.io/posts/34.html</id>
    <published>2022-09-29T02:30:00.000Z</published>
    <updated>2022-09-28T09:50:03.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更多教程笔记请查看我的上一篇文章：点击跳转"><a href="#更多教程笔记请查看我的上一篇文章：点击跳转" class="headerlink" title="更多教程笔记请查看我的上一篇文章：点击跳转"></a>更多教程笔记请查看我的上一篇文章：<a href="https://yswm-m.github.io/posts/7.html">点击跳转</a></h2><h1 id="C-11（lambad表达式）自学之旅开始！"><a href="#C-11（lambad表达式）自学之旅开始！" class="headerlink" title="C++11（lambad表达式）自学之旅开始！"></a>C++11（lambad表达式）自学之旅开始！</h1><h2 id="本次将介绍C-11里新的函数写法：labmda表达式"><a href="#本次将介绍C-11里新的函数写法：labmda表达式" class="headerlink" title="本次将介绍C++11里新的函数写法：labmda表达式"></a>本次将介绍C++11里新的函数写法：labmda表达式</h2><h3>lambda表达式很早就有了，后来被C++11引入，原本我对lambda的语法一点兴趣都没有，可是之前还在公司的一个学长跟我说lambda表达式很有用，所以我就去学了。</h3><h3>这东西确实挺厉害的，据说发明他的作者认为一切程序的本质都是函数，后面还用了数学公式证明，不得不说数学厉害的人写程序真的强，随便就弄出一个定理和语法规范，让我们都得跟着学。</h3><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">语法</button></li><li class="tab"><button type="button" data-href="#test1-2">嵌套</button></li><li class="tab"><button type="button" data-href="#test1-3">按值捕获</button></li><li class="tab"><button type="button" data-href="#test1-4">按引用捕获</button></li><li class="tab"><button type="button" data-href="#test1-5">实战</button></li><li class="tab"><button type="button" data-href="#test1-6">函数对象包装器</button></li><li class="tab"><button type="button" data-href="#test1-7">bind机制</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><h2 id="lambda表达式语法"><a href="#lambda表达式语法" class="headerlink" title="lambda表达式语法"></a>lambda表达式语法</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// lambda表达式</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//正常函数的写法 有名字,有返回值,有参数列表</span><span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">/* lambda表达式的本质就是一个仿函数(匿名函数)    也就是一个类里面有一个operator()() 重载小括号    它没有名字    */</span>    <span class="token comment">//这是lambda表达式的写法,匿名的,前面的[]符号代表正常函数中的fun也就是名字,后面的()符号</span>    <span class="token comment">//代表函数的参数列表,再后面的-&gt;int代表函数的返回值类型,也就是正常函数前面的int,void之类的</span>    <span class="token comment">//紧接着后面的{}里写函数的主体,也就是函数的具体实现,最后一个()里写调用函数时的传参</span>    <span class="token comment">// 1.[]函数名字 2.()参数列表 3.-&gt;int函数返回值类型 4.{}函数主体</span>    <span class="token comment">//最后返回的值在最前面用一个变量来接收</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span>    <span class="token punctuation">{</span>        <span class="token comment">//函数主体</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5.()调用函数传参 在定义时就可以立即匿名调用 但是在其他地方就用不了了</span>    <span class="token comment">//上面等价于下面</span>    <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//第二种写法 使用自动类型推导 auto将会把它推成一个匿名函数的类型</span>    <span class="token comment">//也就是把f当作这个匿名函数的名字,那么在其他地方就可以通过f调用到这个匿名函数</span>    <span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span>    <span class="token punctuation">{</span>        <span class="token comment">//函数主体</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// f被当作了上面这个匿名函数的名字,通过f调用到了这个匿名函数</span>    <span class="token keyword">int</span> c3 <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> c3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><h2 id="lambda表达式实战-嵌套"><a href="#lambda表达式实战-嵌套" class="headerlink" title="lambda表达式实战-嵌套"></a>lambda表达式实战-嵌套</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// lambda表达式实战-嵌套</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// lambda嵌套lambda</span>    <span class="token comment">// lambda 跟普通类型一样可以作为参数也可以作为返回值 这里就是作为返回值 也叫Currying</span>    <span class="token comment">//函数编程 用于多线程 并发</span>    <span class="token comment">//外面的函数体返回的是内部的函数体的内容</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//内部的函数体可以使用外部的函数体的形参,只要在内部的函数体的[]里加上外部的变量名即可</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//只有一条return语句可以不写返回类型，编译器会推断 其他情况不写就是void</span>            <span class="token keyword">return</span> n <span class="token operator">+</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匿名调用内部的函数 1传给x</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 匿名调用外部的函数 2传给n</span>    cout <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//通过自动类型推导为匿名函数加上名字,可以让它在其他地方调用</span>    <span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"n= "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"x= "</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> n <span class="token operator">+</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//调用函数传参 1传给n 2传给x 先传参调用外层,再传参调用里层</span>    <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> c2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><h2 id="lambda按值捕获-mutable"><a href="#lambda按值捕获-mutable" class="headerlink" title="lambda按值捕获-mutable"></a>lambda按值捕获-mutable</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// mutable-lambda按值捕获</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// lambda第三种写法</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">//如果想要获取外部(上面)的t的值,那么就不能写在参数列表()里,参数列表是在调用时传的</span>    <span class="token comment">//要写在[]里,[]是捕获列表,也就是匿名函数的捕获区,在捕获区里写变量名即可捕获外部的变量</span>    <span class="token comment">//在[]里捕获的变量默认是const类型,无法被修改,只有在()后面加了mutable关键字后[]捕获的值才能被修改</span>    <span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">mutable</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">++</span>t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//在用mutable进行捕获时会单独拷贝出一份地址,这样在里面修改的值会一直保存在函数体里,下一次调用时会依旧使用上一次拷贝的值</span>    <span class="token comment">//这个值只在当前的匿名函数内部是有效的,就算外部有一个一模一样的匿名函数调用也只拷贝原来变量的值,无法拷贝之前匿名函数的值</span>    <span class="token comment">// 11</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 12</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//按值捕获,在函数体内部的修改影响不了外部的值,也就是形参无法修改实参</span>    cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-4"><h2 id="lambda按引用捕获"><a href="#lambda按引用捕获" class="headerlink" title="lambda按引用捕获"></a>lambda按引用捕获</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// lambda按引用捕获</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//按值捕获</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    t <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    <span class="token comment">// 10 按值捕获的时候,在捕获时变量的值是多少,捕获的值就是多少,无法捕获到在捕获后面才声明的值</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//按引用捕获,传的是指针,可以改变实参</span>    <span class="token keyword">auto</span> f2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>t<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    t <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 13 按引用捕获可以捕获到在函数后面才声明的值,并可以改变它,在函数调用前变量的值是多少,引用捕获的值就是多少</span>    <span class="token comment">//在函数内部修改按引用捕获的值后就可以修改外部变量的值,也就是通过指针改变实参</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&amp;t = "</span> <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//捕获列表,可以同时捕获多个变量</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" b= "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//捕获外部所有的变量,按值捕获</span>    <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" b= "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" c = "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> <span class="token string">" d= "</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> <span class="token string">" t= "</span> <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//捕获外部所有的变量,按引用捕获</span>    <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&amp;a = "</span> <span class="token operator">&lt;&lt;</span> a<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" &amp;b= "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>b <span class="token operator">&lt;&lt;</span> <span class="token string">" &amp;c = "</span> <span class="token operator">&lt;&lt;</span> c<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" &amp;d= "</span> <span class="token operator">&lt;&lt;</span> d<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" &amp;t= "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>t <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//既按值捕获,又按引用捕获</span>    <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" b= "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" &amp;c = "</span> <span class="token operator">&lt;&lt;</span> c<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" d= "</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> <span class="token string">" &amp;t= "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>t <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-5"><h2 id="lambda实战"><a href="#lambda实战" class="headerlink" title="lambda实战"></a>lambda实战</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// lambda实战</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//使用动态数组遍历判断奇偶数的普通写法</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"是偶数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"是奇数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"-------------------------------"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//使用lambda的写法,在for_each的最后面使用匿名函数遍历</span>    <span class="token comment">//在每一次遍历完后将元素传递给参数列表的n</span>    <span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"是偶数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"是奇数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-6"><h2 id="lambda-function函数对象包装器"><a href="#lambda-function函数对象包装器" class="headerlink" title="lambda-function函数对象包装器"></a>lambda-function函数对象包装器</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// lambda-function函数对象包装器</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//需要包含这个头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span><span class="token keyword">int</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CTest</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//构造函数</span>    <span class="token function">CTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">//普通成员函数</span>    <span class="token keyword">int</span> <span class="token function">Mytest</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//仿函数的写法</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//普通函数</span>    <span class="token function">test01</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//函数对象包装器,第一个int是返回值的类型,第二个()里的int是参数列表</span>    function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> test01<span class="token punctuation">;</span>    <span class="token comment">//将普通函数包装成一个叫做f的对象,可以直接使用f进行调用</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//支持4种函数的包装:1.普通函数 2.匿名函数 3.类的成员函数 4.仿函数(重载了()运算符的函数)</span>    <span class="token comment">//匿名函数包装</span>    function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> f2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//类的成员函数包装 因为类的成员函数传递的是类的对象的引用,所以在参数列表里要写上类的指针</span>    function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>CTest <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> f3 <span class="token operator">=</span> <span class="token operator">&amp;</span>CTest<span class="token operator">::</span>Mytest<span class="token punctuation">;</span>    CTest t<span class="token punctuation">;</span>    <span class="token comment">//调用包装的函数</span>    <span class="token function">f3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//仿函数的包装</span>    function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>CTest <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> f4 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token class-name">CTest</span><span class="token operator">::</span><span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用仿函数</span>    <span class="token function">f4</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-7"><h2 id="lambda-bind机制"><a href="#lambda-bind机制" class="headerlink" title="lambda-bind机制"></a>lambda-bind机制</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// bind机制</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//假设有一个函数有很多的参数,而每次调用的时候都想传递1 2 3 4 给参数 a b c d</span>    <span class="token comment">//那么就可以利用bind把调用的过程用参数和函数名绑定变成一个对象</span>    <span class="token keyword">auto</span> a <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>test01<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//那么在下次调用时就可以直接通过调用对象的方式调用绑定的函数,函数默认传参</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//假设在绑定时第2个函数的参数暂时不知道,可以用placeholders使参数待定,等待调用的时候再根据传递的值进行绑定</span>    <span class="token comment">//_1代表第一个参数,也就是调用的时候先传的第一个参数</span>    <span class="token keyword">auto</span> foo2 <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>test01<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> placeholders<span class="token operator">::</span>_1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里的2是传给了placeholders::_1</span>    <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使多个参数待定</span>    <span class="token keyword">auto</span> foo3 <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>test01<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> placeholders<span class="token operator">::</span>_2<span class="token punctuation">,</span> placeholders<span class="token operator">::</span>_1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里的1是传给了placeholders::_1, 2是传给了placeholders::_2</span>    <span class="token comment">//这样的话就可以使函数调用的顺序不同</span>    <span class="token function">foo3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;更多教程笔记请查看我的上一篇文章：点击跳转&quot;&gt;&lt;a href=&quot;#更多教程笔记请查看我的上一篇文章：点击跳转&quot; class=&quot;headerlink&quot; title=&quot;更多教程笔记请查看我的上一篇文章：点击跳转&quot;&gt;&lt;/a&gt;更多教程笔记请查看我的上一篇文章：&lt;a hre</summary>
      
    
    
    
    <category term="C++" scheme="https://yswm-m.github.io/categories/C/"/>
    
    
    <category term="教程" scheme="https://yswm-m.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="学习" scheme="https://yswm-m.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记" scheme="https://yswm-m.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C++11（RAll智能指针）</title>
    <link href="https://yswm-m.github.io/posts/33.html"/>
    <id>https://yswm-m.github.io/posts/33.html</id>
    <published>2022-09-28T02:28:00.000Z</published>
    <updated>2022-09-28T09:49:52.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更多教程笔记请查看我的上一篇文章：点击跳转"><a href="#更多教程笔记请查看我的上一篇文章：点击跳转" class="headerlink" title="更多教程笔记请查看我的上一篇文章：点击跳转"></a>更多教程笔记请查看我的上一篇文章：<a href="https://yswm-m.github.io/posts/7.html">点击跳转</a></h2><h1 id="C-11（RAll智能指针）自学之旅开始！"><a href="#C-11（RAll智能指针）自学之旅开始！" class="headerlink" title="C++11（RAll智能指针）自学之旅开始！"></a>C++11（RAll智能指针）自学之旅开始！</h1><h2 id="本次将介绍C-11最有用的更新：智能指针"><a href="#本次将介绍C-11最有用的更新：智能指针" class="headerlink" title="本次将介绍C++11最有用的更新：智能指针"></a>本次将介绍C++11最有用的更新：智能指针</h2><h3>长久以来C++的内存管理机制就一直被人诟病，没有GC回收，需要手动释放分配的内存，很容易被忘记释放内存的程序员造成内存泄漏，甚至被linux之父Linus炮轰C++是一门很烂的语言</h3><h4 id="详情请点击这里"><a href="#详情请点击这里" class="headerlink" title="详情请点击这里"></a>详情请点击<a href="https://zhuanlan.zhihu.com/p/366555378">这里</a></h4><h3>但是C++也在不断的改进自身，不断的吸取教训，我相信C++未来会越来越好！</h3><h3>说回话题本身，智能指针是一个可以帮助C++程序员自动释放所分配内存的强大利器，不过用得好和用不好是两回事，下面我们来看一下智能指针的诞生原因：</h3><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">概念</button></li><li class="tab"><button type="button" data-href="#test1-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><h3 id="概念代码："><a href="#概念代码：" class="headerlink" title="概念代码："></a>概念代码：</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//智能指针</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdfix.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// c语言当中对文件的操作</span>FILE <span class="token operator">*</span><span class="token function">open_file</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"rb++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CTest</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">CTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"构造函数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">//申请堆区资源</span>        m_pInt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">CTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"析构函数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_pInt <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//释放资源</span>            <span class="token keyword">delete</span> m_pInt<span class="token punctuation">;</span>            m_pInt <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token operator">*</span>m_pInt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//创建一个全局对象,全局对象有构造有析构,在对象创建和销毁前编译器都会主动调用构造和析构函数</span><span class="token comment">//利用这个机制即可解决手动释放资源所带来的问题</span>CTest test<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// c++需要自己管理堆内存的申请和释放</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> p<span class="token punctuation">;</span>    <span class="token comment">//有的时候会忘记资源的释放导致资源泄漏</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><h3 id="看明白了吧，在对象创建和销毁前编译器都会主动调用构造和析构函数，这便是智能指针诞生的原因"><a href="#看明白了吧，在对象创建和销毁前编译器都会主动调用构造和析构函数，这便是智能指针诞生的原因" class="headerlink" title="看明白了吧，在对象创建和销毁前编译器都会主动调用构造和析构函数，这便是智能指针诞生的原因"></a>看明白了吧，在对象创建和销毁前编译器都会主动调用构造和析构函数，这便是智能指针诞生的原因</h3><h3>智能指针便是简化了上述操作，在对象创建后由智能指针来接管，就算不手动释放内存，智能指针也会自动调用析构帮你释放，不得不说C++真是太强大了!</h3><h3>话不多说，我们一起来看看智能指针的实际操作：</h3><h3 id="实战代码："><a href="#实战代码：" class="headerlink" title="实战代码："></a>实战代码：</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//智能指针-unique_ptr独占指针</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token comment">//想用智能指针必须包含这个头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//默认构造</span>    <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token comment">//有参构造函数</span>    <span class="token function">Cat</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//析构函数</span>    <span class="token operator">~</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Destructor of Cat: "</span> <span class="token operator">&lt;&lt;</span> m_Name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//成员函数 默认不可修改</span>    <span class="token keyword">void</span> <span class="token function">cat_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cat info name: "</span> <span class="token operator">&lt;&lt;</span> m_Name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_Name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//将内部的m_Name修改</span>    <span class="token keyword">void</span> <span class="token function">set_cat_name</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment">//创建一个变量给予默认值</span>    string m_Name<span class="token punctuation">{</span><span class="token string">"Mimi"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//调用有参构造和成员函数</span>    Cat <span class="token function">c1</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c1<span class="token punctuation">.</span><span class="token function">cat_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//下面是局部作用域,在结束前会自动调用析构</span>    <span class="token punctuation">{</span>        Cat <span class="token function">c1</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">cat_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//在堆区开辟内存并调用有参构造</span>    Cat <span class="token operator">*</span>c_p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c_p1<span class="token operator">-&gt;</span><span class="token function">cat_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>        Cat <span class="token operator">*</span>c_p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"yy_scope"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c_p1<span class="token operator">-&gt;</span><span class="token function">cat_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//手动释放</span>        <span class="token keyword">delete</span> c_p1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//手动释放</span>    <span class="token keyword">delete</span> c_p1<span class="token punctuation">;</span>    <span class="token comment">//手动释放非常的不安全,所以需要智能指针</span>    <span class="token comment">//智能指针会自动的释放内存,不需要手动释放</span>    <span class="token comment">// unique_ptr的第一种用法:</span>    <span class="token comment">//向堆区申请内存</span>    Cat <span class="token operator">*</span>c_p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"yz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建一个智能指针指向那个指向堆区内存的指针</span>    unique_ptr<span class="token operator">&lt;</span>Cat<span class="token operator">&gt;</span> u_c_p2<span class="token punctuation">{</span>c_p2<span class="token punctuation">}</span><span class="token punctuation">;</span>    c_p2<span class="token operator">-&gt;</span><span class="token function">cat_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u_c_p2<span class="token operator">-&gt;</span><span class="token function">cat_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//当指针内部的变量修改后</span>    c_p2<span class="token operator">-&gt;</span><span class="token function">set_cat_name</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//智能指针也会修改</span>    u_c_p2<span class="token operator">-&gt;</span><span class="token function">cat_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> c_p2<span class="token punctuation">;</span>    c_p2 <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token comment">//当堆区的内存释放后就无法再通过智能指针调用了</span>    <span class="token comment">// u_c_p2-&gt;cat_info();</span>    <span class="token comment">//第二种用法:</span>    <span class="token comment">//在堆区创建时就用智能指针指向那个指向堆区内存的指针</span>    unique_ptr<span class="token operator">&lt;</span>Cat<span class="token operator">&gt;</span> u_c_p3<span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"dd"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    u_c_p3<span class="token operator">-&gt;</span><span class="token function">cat_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u_c_p3<span class="token operator">-&gt;</span><span class="token function">set_cat_name</span><span class="token punctuation">(</span><span class="token string">"oo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u_c_p3<span class="token operator">-&gt;</span><span class="token function">cat_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第三种用法 利用make_unique默认创建,调用默认构造函数</span>    unique_ptr<span class="token operator">&lt;</span>Cat<span class="token operator">&gt;</span> u_c_p4 <span class="token operator">=</span> make_unique<span class="token operator">&lt;</span>Cat<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u_c_p4<span class="token operator">-&gt;</span><span class="token function">cat_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u_c_p4<span class="token operator">-&gt;</span><span class="token function">set_cat_name</span><span class="token punctuation">(</span><span class="token string">"oo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    u_c_p4<span class="token operator">-&gt;</span><span class="token function">cat_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// get和常量类型</span>    unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> u_i_1<span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//通过get就可以打印int的地址</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"int address: "</span> <span class="token operator">&lt;&lt;</span> u_i_1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cat address: "</span> <span class="token operator">&lt;&lt;</span> u_c_p3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//解引用</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>u_i_1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> u_i_p2 <span class="token operator">=</span> make_unique<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>u_i_p2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> u_i_p2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;更多教程笔记请查看我的上一篇文章：点击跳转&quot;&gt;&lt;a href=&quot;#更多教程笔记请查看我的上一篇文章：点击跳转&quot; class=&quot;headerlink&quot; title=&quot;更多教程笔记请查看我的上一篇文章：点击跳转&quot;&gt;&lt;/a&gt;更多教程笔记请查看我的上一篇文章：&lt;a hre</summary>
      
    
    
    
    <category term="C++" scheme="https://yswm-m.github.io/categories/C/"/>
    
    
    <category term="教程" scheme="https://yswm-m.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="学习" scheme="https://yswm-m.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记" scheme="https://yswm-m.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C++11(auto自动识别变量类型)</title>
    <link href="https://yswm-m.github.io/posts/36.html"/>
    <id>https://yswm-m.github.io/posts/36.html</id>
    <published>2022-09-28T02:26:00.000Z</published>
    <updated>2022-09-28T09:50:17.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更多教程笔记请查看我的上一篇文章：点击跳转"><a href="#更多教程笔记请查看我的上一篇文章：点击跳转" class="headerlink" title="更多教程笔记请查看我的上一篇文章：点击跳转"></a>更多教程笔记请查看我的上一篇文章：<a href="https://yswm-m.github.io/posts/7.html">点击跳转</a></h2><h1 id="C-11自学之旅开始！"><a href="#C-11自学之旅开始！" class="headerlink" title="C++11自学之旅开始！"></a>C++11自学之旅开始！</h1><h2 id="本次将介绍C-11里对比赛比较有用的：auto关键字"><a href="#本次将介绍C-11里对比赛比较有用的：auto关键字" class="headerlink" title="本次将介绍C++11里对比赛比较有用的：auto关键字"></a>本次将介绍C++11里对比赛比较有用的：auto关键字</h2><h3>auto关键字可以自动的识别一个变量的类型并赋给另一个变量，类似于js中的var，auto的出现让代码中一些单词比较长的容器迭代器变成较短的变量，极大的提升了比赛中选手敲代码的速度，毕竟有些时候手速也能决定比赛的关键胜负。</h3><h3 id="auto的基本使用代码"><a href="#auto的基本使用代码" class="headerlink" title="auto的基本使用代码:"></a>auto的基本使用代码:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// auto的用法,自动识别变量类型,创建一个识别后的变量</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> arr<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>iterator i <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//上面等价于</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> j <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">!=</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>j <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// auto在for循环中的用法</span>    string s <span class="token operator">=</span> <span class="token string">"ABCD ,Work "</span><span class="token punctuation">;</span>    string s2<span class="token punctuation">;</span>    <span class="token comment">//创建一个自动变量c,遍历s里面每一个字符</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> c <span class="token operator">:</span> s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//如果c不等于标点符号与空格则插入另一个字符串</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ispunct</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            s2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> s2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// int类型</span>    <span class="token keyword">auto</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//自动判断括号内的数据类型并赋值给b</span>    <span class="token keyword">decltype</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;更多教程笔记请查看我的上一篇文章：点击跳转&quot;&gt;&lt;a href=&quot;#更多教程笔记请查看我的上一篇文章：点击跳转&quot; class=&quot;headerlink&quot; title=&quot;更多教程笔记请查看我的上一篇文章：点击跳转&quot;&gt;&lt;/a&gt;更多教程笔记请查看我的上一篇文章：&lt;a hre</summary>
      
    
    
    
    <category term="C++" scheme="https://yswm-m.github.io/categories/C/"/>
    
    
    <category term="教程" scheme="https://yswm-m.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="学习" scheme="https://yswm-m.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记" scheme="https://yswm-m.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ACM 2022级招新线上预选赛</title>
    <link href="https://yswm-m.github.io/posts/28.html"/>
    <id>https://yswm-m.github.io/posts/28.html</id>
    <published>2022-09-28T02:11:00.000Z</published>
    <updated>2022-09-28T00:36:44.955Z</updated>
    
    <content type="html"><![CDATA[<h3 id="赛后总结"><a href="#赛后总结" class="headerlink" title="赛后总结"></a>赛后总结</h3><h4>我感觉这次比赛比较难的就第D题和第E题，一个是简化版背包，一个是贪心，其他的都比较简单，用来招新生的话感觉正好，我估计真的去他们学校比的话也就能全对个四题左右吧，其他全是暴力骗分。</h4><h4>我9点半才看到题目，他们应该都比完了，我花了半个小时就全部做出来了，可惜我不是这学校的 55555</h4><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><img src="https://pic.imgdb.cn/item/632fb53116f2c2beb1e6de4b.png" alt=""></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4>没啥好说的,基本上全是暴力，遇到字符'A'就加1，遇到字符'B'就减1，然后用一个变量记录最大的值。</h4><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//问题A</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'A'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            x<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            x<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> maxnum<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            maxnum <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> maxnum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><img src="https://pic.imgdb.cn/item/632fb53116f2c2beb1e6de51.png" alt=""></p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><h4>这题我感觉数据范围过大了，我用的动态规划应该只能过一半的样例，可能需要用到滚动数组或者矩阵快速幂优化，不过能暴力骗分就行，毕竟半小时做的。</h4><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//问题B</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">long</span> N <span class="token operator">=</span> <span class="token number">1e8</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>LL q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    LL n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> q<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><img src="https://pic.imgdb.cn/item/632fb53116f2c2beb1e6de63.png" alt=""></p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><h4>这道题我听说他们后面把数据范围加强了，我一开始看题面还以为是那种求总方案的个数或者求花最少的钱的方案之类的dfs的题，后面我又想毕竟是新生赛不可能那么难，于是试着暴力居然过了，看来真是暴力出奇迹。</h4><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//问题C</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> n <span class="token operator">||</span> b <span class="token operator">==</span> n <span class="token operator">||</span> a <span class="token operator">+</span> b <span class="token operator">==</span> n<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            a <span class="token operator">=</span> a <span class="token operator">+</span> x<span class="token punctuation">;</span>            b <span class="token operator">=</span> b <span class="token operator">+</span> y<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> n <span class="token operator">&amp;&amp;</span> b <span class="token operator">&gt;</span> n <span class="token operator">&amp;&amp;</span> a <span class="token operator">+</span> b <span class="token operator">&gt;</span> n<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><img src="https://pic.imgdb.cn/item/632fb53116f2c2beb1e6de73.png" alt=""></p><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><h4>这道题的输入输出样例我真的是不能再熟悉了，就是01背包的样例改过来的，我看了下题目果然是背包问题简化版，想不到新生赛居然出这种题，要是那种没看过背包问题的岂不是直接没了，不过还是被我用哈希表给暴力出来了。</h4><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//问题D</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> t<span class="token punctuation">,</span> count<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            w<span class="token punctuation">[</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> n<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><img src="https://pic.imgdb.cn/item/632fb53116f2c2beb1e6de84.png" alt=""></p><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><h4>这道题是很明显的贪心问题，难点就在于如何模拟他的选择，如果只选最大的分数就有可能变成10的倍数，如果只选不可能变成10的倍数的分数就可能无法使最后的总得分最大，所以既要最后的总得分不能是10的倍数，又要分数尽可能的大。</h4><h4>我的思路是先把全部的分数加起来，再利用排序从最小的分数开始减，减一次判断一次减之后是不是10的倍数，如果减之后不是那么就减，如果减之后依然是那么就不减，继续判断下一个数，将损失降到最小。</h4><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//问题E</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> maxnum<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> q <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    sum <span class="token operator">-=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><img src="https://pic.imgdb.cn/item/632fb53b16f2c2beb1e6ec56.png" alt=""></p><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><h4>这道题没啥好说的，看图都能看出来，四条从下往上的线可以构成3个空格，三条从右往左的线可以构成2个空格，把它们两个的空格数乘起来就可以得到答案。</h4><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//问题F</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述:"></a>题目描述:</h3><p><img src="https://pic.imgdb.cn/item/632fb53b16f2c2beb1e6ec7d.png" alt=""></p><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><h4>这道题主要考的就是字符转数字的技巧，看过我以前的高精度博客就知道，减去字符'0'就可以将一个数字字符转成可以参与运算的整形数字，然后乘10来进位，绝对值用abs()函数来求，最后用一个变量将所得的差值最小的数存储起来。</h4><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//问题G</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minnum <span class="token operator">=</span> INT_MAX<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        k <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            x <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                x <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sum <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">753</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> minnum<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            minnum <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> minnum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;赛后总结&quot;&gt;&lt;a href=&quot;#赛后总结&quot; class=&quot;headerlink&quot; title=&quot;赛后总结&quot;&gt;&lt;/a&gt;赛后总结&lt;/h3&gt;&lt;h4&gt;
我感觉这次比赛比较难的就第D题和第E题，一个是简化版背包，一个是贪心，其他的都比较简单，用来招新生的话感觉正好，我估计真</summary>
      
    
    
    
    <category term="刷题" scheme="https://yswm-m.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="练习" scheme="https://yswm-m.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="比赛" scheme="https://yswm-m.github.io/tags/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>十大排序算法总结</title>
    <link href="https://yswm-m.github.io/posts/27.html"/>
    <id>https://yswm-m.github.io/posts/27.html</id>
    <published>2022-09-27T07:11:00.000Z</published>
    <updated>2022-09-28T07:18:41.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习思路"><a href="#学习思路" class="headerlink" title="学习思路"></a>学习思路</h2><h3>排序是算法里面经常会考的题目，也是面试题里面会出的经典问题，虽然各种语言本身就内置了sort()排序函数，但是掌握其它的排序算法可以让我们在处理数据上显得游刃有余，同时一些排序算法里面的思想也与数据结构里面的算法思想不谋而合，所以排序算法是每个合格的程序员都必须掌握的。</h3><h4 id="排序算法练习题目"><a href="#排序算法练习题目" class="headerlink" title="排序算法练习题目"></a><a href="https://www.acwing.com/problem/content/description/787/">排序算法练习题目</a></h4><h3 id="排序算法的分类："><a href="#排序算法的分类：" class="headerlink" title="排序算法的分类："></a>排序算法的分类：</h3><p><img src="https://pic.imgdb.cn/item/632eb66716f2c2beb1dbba16.png" alt=""></p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">冒泡</button></li><li class="tab"><button type="button" data-href="#test1-2">选择</button></li><li class="tab"><button type="button" data-href="#test1-3">插入</button></li><li class="tab"><button type="button" data-href="#test1-4">希尔</button></li><li class="tab"><button type="button" data-href="#test1-5">归并</button></li><li class="tab"><button type="button" data-href="#test1-6">快速</button></li><li class="tab"><button type="button" data-href="#test1-7">堆</button></li><li class="tab"><button type="button" data-href="#test1-8">堆2.0</button></li><li class="tab"><button type="button" data-href="#test1-9">计数</button></li><li class="tab"><button type="button" data-href="#test1-10">桶</button></li><li class="tab"><button type="button" data-href="#test1-11">基数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><h3 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序:"></a>1、冒泡排序:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e8</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//交换两个数</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//接收输入的数据</span>    <span class="token punctuation">}</span>    <span class="token function">bubble_sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用函数排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><h3 id="2、选择排序"><a href="#2、选择排序" class="headerlink" title="2、选择排序:"></a>2、选择排序:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e8</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">select_sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                k <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//交换两个数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//接收输入的数据</span>    <span class="token punctuation">}</span>    <span class="token function">select_sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用函数排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><h3 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序:"></a>3、插入排序:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e8</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//接收输入的数据</span>    <span class="token punctuation">}</span>    <span class="token function">insert_sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用函数排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-4"><h3 id="4、希尔排序"><a href="#4、希尔排序" class="headerlink" title="4、希尔排序:"></a>4、希尔排序:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e8</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> gap<span class="token punctuation">;</span> gap <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> gap <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">&gt;</span> x<span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//接收输入的数据</span>    <span class="token punctuation">}</span>    <span class="token function">shell_sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用函数排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-5"><h3 id="5、归并排序"><a href="#5、归并排序" class="headerlink" title="5、归并排序:"></a>5、归并排序:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e8</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//开辟一个临时数组将原数组比较完的数储存</span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">//区间内只有一个数，返回</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">//相当于(l + r) / 2</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//递归左半部分</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//递归右半部分</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token comment">//合并</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//将排序好的数转移回原数组</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//接收输入的数据</span>    <span class="token punctuation">}</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用函数排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-6"><h3 id="6、快速排序（最快）"><a href="#6、快速排序（最快）" class="headerlink" title="6、快速排序（最快）:"></a>6、快速排序（最快）:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e8</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> a<span class="token punctuation">[</span>l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//交换两个数</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//递归左半部分</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//递归右半部分</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//接收输入的数据</span>    <span class="token punctuation">}</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用函数排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-7"><h3 id="7、堆排序（须知此排序使用了模拟堆，为了使最后一个非叶子节点的编号为n-2，数组编号从1开始）"><a href="#7、堆排序（须知此排序使用了模拟堆，为了使最后一个非叶子节点的编号为n-2，数组编号从1开始）" class="headerlink" title="7、堆排序（须知此排序使用了模拟堆，为了使最后一个非叶子节点的编号为n/2，数组编号从1开始）:"></a>7、堆排序（须知此排序使用了模拟堆，为了使最后一个非叶子节点的编号为n/2，数组编号从1开始）:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e8</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> u<span class="token punctuation">;</span> <span class="token comment">// t记录最小值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t <span class="token operator">=</span> u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 左儿子</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t <span class="token operator">=</span> u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 右儿子</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> t<span class="token punctuation">)</span> <span class="token comment">//需要调整</span>    <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//交换两个数</span>        <span class="token function">down</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//递归</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//接收输入的数据</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">down</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化堆</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出</span>        h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">down</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-8"><h3 id="堆排序2-0（利用C-内置STL函数优先队列实现）"><a href="#堆排序2-0（利用C-内置STL函数优先队列实现）" class="headerlink" title="堆排序2.0（利用C++内置STL函数优先队列实现）:"></a>堆排序2.0（利用C++内置STL函数优先队列实现）:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//感慨万千：STL太好用了！</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1e8</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span> <span class="token comment">//小根堆</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//接收输入的数据</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//入队</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//判断队列是否为空</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出队顶的最小值</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//出队</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-9"><h3 id="8、计数排序"><a href="#8、计数排序" class="headerlink" title="8、计数排序:"></a>8、计数排序:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e8</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x3f3f3f</span><span class="token punctuation">,</span> Min <span class="token operator">=</span> <span class="token number">0x3f3f3f</span><span class="token punctuation">;</span> <span class="token comment">//初始化最大值和最小值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//统计</span>        Max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        Min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//更新最大值和最小值</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> Min<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-10"><h3 id="9、桶排序"><a href="#9、桶排序" class="headerlink" title="9、桶排序:"></a>9、桶排序:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e8</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> Min <span class="token operator">=</span> N<span class="token punctuation">,</span> Max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> f<span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> bucket<span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//定义桶，这里定义40个桶</span><span class="token keyword">void</span> <span class="token function">insertsort</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> bucket<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> bucket<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里是从小到大排序</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> bucket<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//由于每个桶都是有序的，所以可以输出这个桶，节省了一次遍历的时间</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">bucketsort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        bucket<span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> Min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Max <span class="token operator">-</span> Min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">40.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> Min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Max <span class="token operator">-</span> Min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">40.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//运用最大最小值来合理分配桶</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">insertsort</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果当前桶有数值，则对桶内的数进行排序（这里用选择排序）</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">,</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">,</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//为了能够合理利用空间，确保第一个桶和最后一个桶都有数，所以存储最大最小值</span>    <span class="token punctuation">}</span>    <span class="token function">bucketsort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-11"><h3 id="10、基数排序（基数排序是桶排序的特例，优势是可以处理浮点数和负数，劣势是还要配合别的排序函数）"><a href="#10、基数排序（基数排序是桶排序的特例，优势是可以处理浮点数和负数，劣势是还要配合别的排序函数）" class="headerlink" title="10、基数排序（基数排序是桶排序的特例，优势是可以处理浮点数和负数，劣势是还要配合别的排序函数）:"></a>10、基数排序（基数排序是桶排序的特例，优势是可以处理浮点数和负数，劣势是还要配合别的排序函数）:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e8</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> count<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">maxbit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> maxv <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// maxv保存最大的位数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxv <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            maxv <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        maxv <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">radixsort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//基数排序</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">maxbit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//进行t次排序</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//清空计数器</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> radix<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            count<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> radix<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            temp<span class="token punctuation">[</span>count<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            count<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        radix <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//接收输入的数据</span>    <span class="token punctuation">}</span>    <span class="token function">radixsort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用函数排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;学习思路&quot;&gt;&lt;a href=&quot;#学习思路&quot; class=&quot;headerlink&quot; title=&quot;学习思路&quot;&gt;&lt;/a&gt;学习思路&lt;/h2&gt;&lt;h3&gt;
排序是算法里面经常会考的题目，也是面试题里面会出的经典问题，虽然各种语言本身就内置了sort()排序函数，但是掌握其它的</summary>
      
    
    
    
    <category term="算法" scheme="https://yswm-m.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="练习" scheme="https://yswm-m.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="排序" scheme="https://yswm-m.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>高精度模板(加减乘除)</title>
    <link href="https://yswm-m.github.io/posts/26.html"/>
    <id>https://yswm-m.github.io/posts/26.html</id>
    <published>2022-09-26T07:11:00.000Z</published>
    <updated>2022-09-28T07:41:47.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习思路"><a href="#学习思路" class="headerlink" title="学习思路"></a>学习思路</h2><h3>高精度是算法里面不常考的题目，但是掌握高精度也更有利于我们学习算法和解决实际开发中所遇到的问题，我们知道int的数据范围是-2^31~2^31-1，而long long 的数据范围是-2^63~2^63-1，那么当一个数超过了long long 的范围，想要计算它的结果就变得十分困难，为此我们转变思路，可以利用字符串数组存储那个数，再通过字符串数组个位转整型数字的方式进行人类熟悉的四则运算，最后再将得到的结果用另一个字符串数组存储起来，字符串数组的范围是无限的，根据计算机的内存进行扩充，计算机的内存有多大就可以存储多大的字符串，这便是高精度算法的思想。</h3><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">加法</button></li><li class="tab"><button type="button" data-href="#test1-2">减法</button></li><li class="tab"><button type="button" data-href="#test1-3">乘法</button></li><li class="tab"><button type="button" data-href="#test1-4">除法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><h3 id="高精度加法模板：（高精-高精）"><a href="#高精度加法模板：（高精-高精）" class="headerlink" title="高精度加法模板：（高精+高精）"></a>高精度加法模板：（高精+高精）</h3><h4 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a><a href="https://www.acwing.com/problem/content/793/">原题链接</a></h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string <span class="token function">addfun</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span><span class="token punctuation">{</span>    string c<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> t <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">,</span> <span class="token operator">--</span>j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            t <span class="token operator">+=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过减去字符 '0' 可以将一个数字字符转变成可以参与运算的整型数字</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            t <span class="token operator">+=</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过加上字符 '0' 可以将参与运算后的整型数字重新转变回数字字符，存放进字符串数组中</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//因为是从字符串末位一个一个往前倒着运算的，所以最后得到的结果要进行翻转</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//使C++输入输出流变快</span>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">addfun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><h3 id="高精度减法模板：（高精-高精）"><a href="#高精度减法模板：（高精-高精）" class="headerlink" title="高精度减法模板：（高精-高精）"></a>高精度减法模板：（高精-高精）</h3><h4 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a><a href="https://www.acwing.com/problem/content/794/">原题链接</a></h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string <span class="token function">subfun</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span><span class="token punctuation">{</span>    string c<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> t <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">,</span> <span class="token operator">--</span>j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">;</span> <span class="token comment">//通过减去字符 '0' 可以将一个数字字符转变成可以参与运算的整型数字</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            t <span class="token operator">-=</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过加上字符 '0' 可以将参与运算后的整型数字重新转变回数字字符，存放进字符串数组中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token comment">//去掉字符串末尾的0</span>    <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//因为是从字符串末位一个一个往前倒着运算的，所以最后得到的结果要进行翻转</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//使C++输入输出流变快</span>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//判断有没有可能第一个数比第二个数小，减成负数的情况</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">subfun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-"</span> <span class="token operator">&lt;&lt;</span> <span class="token function">subfun</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//如果会减成负数那么就要在前面加上负号</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><h3 id="高精度乘法模板：（高精-低精）"><a href="#高精度乘法模板：（高精-低精）" class="headerlink" title="高精度乘法模板：（高精*低精）"></a>高精度乘法模板：（高精*低精）</h3><h4 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a><a href="https://www.acwing.com/problem/content/795/">原题链接</a></h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string <span class="token function">mulfun</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    string c<span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">||</span>t<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            t<span class="token operator">+=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span>b<span class="token punctuation">;</span> <span class="token comment">//通过减去字符 '0' 可以将一个数字字符转变成可以参与运算的整型数字</span>        <span class="token punctuation">}</span>        c<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过加上字符 '0' 可以将参与运算后的整型数字重新转变回数字字符，存放进字符串数组中</span>        t<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//因为是从字符串末位一个一个往前倒着运算的，所以最后得到的结果要进行翻转</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//使C++输入输出流变快</span>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token string">"0"</span><span class="token operator">||</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//因为0乘任何数都得0，所以两个数只要有一个是0就不用参与后面的运算了</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">mulfun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-4"><h3 id="高精度除法模板：（高精-低精）"><a href="#高精度除法模板：（高精-低精）" class="headerlink" title="高精度除法模板：（高精/低精）"></a>高精度除法模板：（高精/低精）</h3><h4 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a><a href="https://www.acwing.com/problem/content/796/">原题链接</a></h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string <span class="token function">divfun</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    string c<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        r<span class="token operator">=</span>r<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过减去字符 '0' 可以将一个数字字符转变成可以参与运算的整型数字</span>        c<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过加上字符 '0' 可以将参与运算后的整型数字重新转变回数字字符，存放进字符串数组中</span>        r<span class="token operator">%=</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>c<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token comment">//去掉字符串首位的0</span>    <span class="token punctuation">{</span>        c <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//使C++输入输出流变快</span>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">divfun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>r<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;学习思路&quot;&gt;&lt;a href=&quot;#学习思路&quot; class=&quot;headerlink&quot; title=&quot;学习思路&quot;&gt;&lt;/a&gt;学习思路&lt;/h2&gt;&lt;h3&gt;
高精度是算法里面不常考的题目，但是掌握高精度也更有利于我们学习算法和解决实际开发中所遇到的问题，我们知道int的数据范围</summary>
      
    
    
    
    <category term="算法" scheme="https://yswm-m.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="练习" scheme="https://yswm-m.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="高精度" scheme="https://yswm-m.github.io/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>数据结构再战—约瑟夫环(循环链表)</title>
    <link href="https://yswm-m.github.io/posts/25.html"/>
    <id>https://yswm-m.github.io/posts/25.html</id>
    <published>2022-09-25T07:11:00.000Z</published>
    <updated>2022-10-17T01:31:17.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习思路"><a href="#学习思路" class="headerlink" title="学习思路"></a>学习思路</h2><h3>约瑟夫环是一个很经典的题目，有多种实现方法，为了练习链表我决定用三种方法实现：循环链表、数组标志位、数组模拟链表。</h3><h4 id="原题链接-AcWing"><a href="#原题链接-AcWing" class="headerlink" title="原题链接: AcWing"></a>原题链接: <a href="https://www.acwing.com/problem/content/3562/">AcWing</a></h4><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><h3>N 个人围成一圈顺序编号，从 1 号开始按 1、2、3 顺序报数，报 m 者退出圈外，其余的人再从 1、2、3 开始报数，报 m 的人再退出圈外，依次类推。请输出最后那个剩下的人的编号。</h3><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><h4>输入一行包含 2 个整数 n，m。注意：程序有多组输入数据，当输入为0时退出</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><h4>对于每组输入数据，输出对应的答案（每组数据中最后剩余的人的编号）用换行隔开</h4><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><h4>所有测试点满足 1 ≤ n ≤ 300，m ≤ n。</h4><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">300 910 311 50 0</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">3448</code></pre><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">循环链表</button></li><li class="tab"><button type="button" data-href="#test1-2">数组标志位</button></li><li class="tab"><button type="button" data-href="#test1-3">数组模拟链表</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><h3 id="循环链表实现代码"><a href="#循环链表实现代码" class="headerlink" title="循环链表实现代码:"></a>循环链表实现代码:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span> NODE<span class="token punctuation">,</span> <span class="token operator">*</span>Link<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment">// n为人数，m为报数，每当报数到m就退出1人</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> answer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// answer保存每次的答案,最后统一输出</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// count用来控制答案数组的下标</span>    Link head<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token comment">//创建头节点</span>    head <span class="token operator">=</span> <span class="token keyword">new</span> NODE<span class="token punctuation">;</span>    head<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token comment">//通过循环保存多组输入数据</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果n(人数)为0或者m(报数)为0则直接结束循环</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//释放头节点</span>            <span class="token keyword">delete</span> head<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment">//让另一个指针指向头节点</span>            tail <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">//按照人数构建链表</span>                p <span class="token operator">=</span> <span class="token keyword">new</span> NODE<span class="token punctuation">;</span>                p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">//保存每个人数的序号,从1开始</span>                tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>       <span class="token comment">//插到头节点的尾部</span>                p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">//最后一个节点的next指向第一个节点，这样就构成了一个循环链表</span>                tail <span class="token operator">=</span> p<span class="token punctuation">;</span>             <span class="token comment">//另一个指针移动到新增的最后一个节点，为下一次插入做准备</span>            <span class="token punctuation">}</span>            <span class="token comment">//当循环链表构建完了之后</span>            p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">// p指针指向第一个链表节点</span>            q <span class="token operator">=</span> tail<span class="token punctuation">;</span>       <span class="token comment">// q指针指向尾节点</span>            <span class="token comment">//报数,从1开始</span>            i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// p和q是一个首,一个尾,永远是一前一后的关系,一旦他们相遇,则说明只剩一个节点了</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> q<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">//当 i 报数到 m</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> m<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment">//把当前节点从链表中删除</span>                    <span class="token comment">//这里的意思是,q永远在p的前一个节点，q-&gt;next-&gt;next表示的是p的下一个节点,而p指向的就是要删除的当前节点</span>                    <span class="token comment">//当q-&gt;next = q-&gt;next-&gt;next时,就把p的前一个节点和p指向的当前的节点的链接断掉了,重新去指向了p的后一个节点</span>                    <span class="token comment">//这样p所在的这个节点就被链表这个队伍抛弃了</span>                    q<span class="token operator">-&gt;</span>next <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>                    <span class="token comment">//然后就可以直接释放p所在的这个节点的内存</span>                    <span class="token keyword">delete</span> p<span class="token punctuation">;</span>                    <span class="token comment">//将p移动到下一个有效节点上,q-&gt;next这时指向的是p被释放的节点的下一个有效节点</span>                    p <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>                    <span class="token comment">// i = 1重新开始报数</span>                    i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token comment">// q指向p所在的节点,而p一开始指向的是第一个有效节点</span>                    q <span class="token operator">=</span> p<span class="token punctuation">;</span>                    <span class="token comment">//然后p往后移动一位,这样q和p就构成了一前一后的关系,一直往后移动</span>                    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>                    <span class="token comment">//报数器加1，一直报数到m就删除p所指向的节点</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">//维持链表的完整性，就是说当循环退出时链表中除了头节点被删的只剩下一个节点了，这个节点由p和q指针共同指着，这时头节点原本指向的第一个有效节点已经被删除，头节点和链表之间联系已经被断开</span>            <span class="token comment">//如果还要对这个剩下的最后一个节点做其他操作那么可以用头节点重新链接这个最后的节点，如果题目没有要求可以不加这一句，只需要在程序最后把那最后一个节点删除就行了</span>            <span class="token comment">// head-&gt;next = q;</span>            <span class="token comment">//将最后一个剩余的人的序号保存起来，它就是我们要的答案</span>            answer<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>            <span class="token comment">//答案数组的计数器加一，进行新一轮的循环</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//删除最后一个节点</span>            <span class="token keyword">delete</span> p<span class="token punctuation">;</span>            head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token comment">//链表这时已为空，只剩下头节点了，可以将头节点的next置为空，这是一个好习惯</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//按照题目要求输出最后的答案</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> answer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><h3 id="数组标志位实现代码"><a href="#数组标志位实现代码" class="headerlink" title="数组标志位实现代码:"></a>数组标志位实现代码:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>      <span class="token comment">// n为人数，m为报数</span>    <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token comment">//记录剩余的人数</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// count代表当前的报数</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> pos<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//如果人数为0或者报数为0则直接终止程序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        number <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token comment">// monkey数组存储人的编号和状态</span>        <span class="token keyword">int</span> monkey<span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//存储-1代表无效的数组部分，0代表退出的人，1至n+1代表还没退出的人序号</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            monkey<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// pos控制当前处理的数组下标,指向数组的开始位置</span>        pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>monkey<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> m<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment">//报数+1</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token comment">//当前处理的数组下标+1</span>                    pos <span class="token operator">=</span> <span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    monkey<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">//标记为0,设置当前人出局</span>                    count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">//报数重新开始</span>                    number<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment">//人数-1</span>                    pos <span class="token operator">=</span> <span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span> <span class="token comment">//当前处理的数组下标+1</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment">//这条语句的妙处在于:当n的人数为10 时，pos为9,那么pos+1就变成了10,而10%10求余之后就变成了0,这样就构成了一个循环的情况</span>                <span class="token comment">//永远在0~9之间循环,当超过9就重新变为0</span>                pos <span class="token operator">=</span> <span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span> <span class="token comment">//当前处理的数组下标+1</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//输出最后的结果</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//此时数组中退出的人的编号都变成了0,只有唯一的那个剩下的人的编号不是0,所以只要找到最后那个不是0的输出就行了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>monkey<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> monkey<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><h3 id="数组模拟链表实现代码"><a href="#数组模拟链表实现代码" class="headerlink" title="数组模拟链表实现代码:"></a>数组模拟链表实现代码:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>          <span class="token comment">// n为人数,m为报数</span>    <span class="token keyword">int</span> number<span class="token punctuation">;</span>        <span class="token comment">//记录剩余的人数</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>         <span class="token comment">// count代表当前的报数</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> prior<span class="token punctuation">;</span> <span class="token comment">// pos指向数组首位,prior指向数组末尾</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//如果人数为0或者报数为0,则终止程序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//数组存储下一个人的位置，标识为-1的代表退出的人</span>        <span class="token keyword">int</span> monkey<span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//初始化数组,数组存储下一个人的下标</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            monkey<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//下标为n-1的元素的下个序号为0，形成循环链表</span>        monkey<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// monkey[i+1] = -2; //将超过范围的元素标识为-2,方便跟踪的时候看数组内存</span>        number <span class="token operator">=</span> n<span class="token punctuation">;</span>        pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        prior <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//设置循环退出条件,也可以设置为:prior!=pos，prior永远指向pos的前一个节点</span>        <span class="token punctuation">{</span>            <span class="token comment">//如果没有报数到m</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> m<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                prior <span class="token operator">=</span> pos<span class="token punctuation">;</span> <span class="token comment">// prior保存pos的上一个节点的下标,也就是prior指针指向pos所在的下标</span>                <span class="token comment">// pos移动到下一个有效节点的下标,也就是pos指针指向下一个节点的下标，因为数组中存储的值刚好是下一个数组元素的下标</span>                <span class="token comment">//所以monkey[pos]里面存储的就是pos要指向的下一个节点的下标</span>                pos <span class="token operator">=</span> monkey<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//报数加1</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token comment">//当报数到了m</span>            <span class="token punctuation">{</span>                <span class="token comment">/*这里非常难理解，经过我一段时间的梳理，发现实际上就是：prior的下标在数组中对应的值是pos的下标,而pos的下标在数组中对应的值是pos的下一个数组元素的下标                当monkey[prior] = monkey[pos]之后，也就是把pos的下标在数组中对应的值(也就是pos的下一个数组元素的下标)赋给monkey[prior]，原本monkey[prior]里面存储的是                pos所在的数组元素的下标，现在就变成了pos的下一个数组元素的下标，这样monkey[prior]与pos所在的数组元素之间的联系就断开了                */</span>                <span class="token comment">//更改链接关系</span>                monkey<span class="token punctuation">[</span>prior<span class="token punctuation">]</span> <span class="token operator">=</span> monkey<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//出局的人,标识为-1,也就是将pos所在的数组元素标记为删除</span>                monkey<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">// pos移动到下一个有效节点,因为经过上面的赋值之后,monkey[prior]里面的值已经变成了原先pos所在数组元素的下一个数组元素的下标</span>                <span class="token comment">//所以pos重新移动到了prior的下一个有效(不为-1)的数组元素</span>                pos <span class="token operator">=</span> monkey<span class="token punctuation">[</span>prior<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//人的个数减一</span>                number<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token comment">//重新开始报数</span>                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//当循环结束后就只剩下最后那个没有被赋值为-1的人被pos和prior共同指着,那个人就是我们要的答案</span>        <span class="token comment">//输出最后一个有效的人,因为pos对应的最后那个人的数组元素的值是比pos下标多1的，所以最后要加1</span>        cout <span class="token operator">&lt;&lt;</span> pos <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;学习思路&quot;&gt;&lt;a href=&quot;#学习思路&quot; class=&quot;headerlink&quot; title=&quot;学习思路&quot;&gt;&lt;/a&gt;学习思路&lt;/h2&gt;&lt;h3&gt;
约瑟夫环是一个很经典的题目，有多种实现方法，为了练习链表我决定用三种方法实现：循环链表、数组标志位、数组模拟链表。
&lt;/</summary>
      
    
    
    
    <category term="数据结构" scheme="https://yswm-m.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="练习" scheme="https://yswm-m.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="再战" scheme="https://yswm-m.github.io/tags/%E5%86%8D%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>数据结构再战—学生管理系统(链表)</title>
    <link href="https://yswm-m.github.io/posts/24.html"/>
    <id>https://yswm-m.github.io/posts/24.html</id>
    <published>2022-09-24T06:46:00.000Z</published>
    <updated>2022-09-27T02:23:17.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习思路"><a href="#学习思路" class="headerlink" title="学习思路"></a>学习思路</h2><h3>为了彻底掌握链表，我决定写一个用链表实现的学生管理系统，其中有链表的增删改查和显示菜单界面，当把这些链表常用的操作都练熟了之后再去对应的做一些题，就可以彻底掌握链表</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">NO_Value <span class="token number">20</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">NAME_Value <span class="token number">11</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> studentNo<span class="token punctuation">[</span>NO_Value<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> studentName<span class="token punctuation">[</span>NAME_Value<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> st<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">Student</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span> Node<span class="token punctuation">,</span> <span class="token operator">*</span>Link<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//菜单界面</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"============================ 欢迎来到学生管理系统 ============================"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t ----------------------------------------\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|                                        |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|              1.增加学生记录            |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|                                        |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|              2.删除学生记录            |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|                                        |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|              3.查找学生记录            |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|                                        |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|              4.修改学生记录            |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|                                        |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|              5.统计学生人数            |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|                                        |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|              6.显示学生记录            |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|                                        |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|              7.退出系统                |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t|                                        |\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\t ----------------------------------------\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入您的选择: "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">inputStudent</span><span class="token punctuation">(</span>Link p<span class="token punctuation">)</span> <span class="token comment">//每当要增加学生时便调用这个函数接收用户的输入</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入学生的学号: "</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentNo<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入学生的姓名: "</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentName<span class="token punctuation">;</span>    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">inputStudentNo</span><span class="token punctuation">(</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> no<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//每当要执行删除,修改和查询时便调用这个函数,接收用户输入的学号</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要"</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">"的学生学号："</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> no<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">addNode</span><span class="token punctuation">(</span>Link head<span class="token punctuation">)</span> <span class="token comment">//增加学生</span><span class="token punctuation">{</span>    Link p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    Link node<span class="token punctuation">;</span>    node <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>    <span class="token function">inputStudent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用这个函数接收用户输入要增加的学生的学号和姓名</span>    q <span class="token operator">=</span> head<span class="token punctuation">;</span>    p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token operator">!=</span> p<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentNo <span class="token operator">&lt;</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentNo<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                q<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                q <span class="token operator">=</span> p<span class="token punctuation">;</span>                p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        q<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>Link head<span class="token punctuation">)</span> <span class="token comment">//删除学生</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> no<span class="token punctuation">[</span>NO_Value<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">inputStudentNo</span><span class="token punctuation">(</span><span class="token string">"删除"</span><span class="token punctuation">,</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用这个函数接收用户输入要删除的学生的学号</span>    Link q <span class="token operator">=</span> head<span class="token punctuation">;</span>    Link p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentNo<span class="token punctuation">,</span> no<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            q<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"删除成功!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            q <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">queryNode</span><span class="token punctuation">(</span>Link head<span class="token punctuation">)</span> <span class="token comment">//查找学生,通过学号查找</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> no<span class="token punctuation">[</span>NO_Value<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">inputStudentNo</span><span class="token punctuation">(</span><span class="token string">"查找"</span><span class="token punctuation">,</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用这个函数接收用户输入要查找的学生的学号</span>    Link p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentNo<span class="token punctuation">,</span> no<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查找到学号 "</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentNo <span class="token operator">&lt;&lt;</span> <span class="token string">" 学生的姓名为："</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentName <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">modifyNode</span><span class="token punctuation">(</span>Link head<span class="token punctuation">)</span> <span class="token comment">//修改学生</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> no<span class="token punctuation">[</span>NO_Value<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">inputStudentNo</span><span class="token punctuation">(</span><span class="token string">"修改"</span><span class="token punctuation">,</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用这个函数接收用户输入要修改的学生的学号</span>    Link p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentNo<span class="token punctuation">,</span> no<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入你要修改"</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentNo <span class="token operator">&lt;&lt;</span> <span class="token string">"学生的姓名: "</span><span class="token punctuation">;</span>            cin <span class="token operator">&gt;&gt;</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentName<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"修改成功!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"修改后学号 "</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentNo <span class="token operator">&lt;&lt;</span> <span class="token string">" 学生的姓名为: "</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentName <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">countNode</span><span class="token punctuation">(</span>Link head<span class="token punctuation">)</span> <span class="token comment">//统计学生人数</span><span class="token punctuation">{</span>    Link p<span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">displayNode</span><span class="token punctuation">(</span>Link head<span class="token punctuation">)</span> <span class="token comment">//显示系统现有的所有学生，也就是遍历整个链表输出链表所存储的数据，要注意如果为空就不进行遍历</span><span class="token punctuation">{</span>    Link p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"学生管理系统为空!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"学生学号："</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentNo <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"学生姓名："</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span>studentName <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clearLink</span><span class="token punctuation">(</span>Link head<span class="token punctuation">)</span> <span class="token comment">//释放整个链表的空间</span><span class="token punctuation">{</span>    Link q<span class="token punctuation">,</span> p<span class="token punctuation">;</span>    q <span class="token operator">=</span> head<span class="token punctuation">;</span>    p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        q<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> select<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    Link head<span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//菜单页面</span>        <span class="token function">myMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>select<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//接收用户的选择</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>select<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token comment">//增加学生</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"插入成功!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token comment">//删除学生</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">deleteNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"删除失败,没有要删除的学生信息!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token comment">//查找学生</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">queryNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查询失败,没有要查询的学生信息!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            <span class="token comment">//修改学生</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">modifyNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"修改失败,没有要修改的学生信息!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            <span class="token comment">//统计学生人数</span>            count <span class="token operator">=</span> <span class="token function">countNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"学生人数为: "</span> <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            <span class="token comment">//显示现有学生</span>            <span class="token function">displayNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>            <span class="token comment">//释放所有链表空间，终止程序</span>            <span class="token function">clearLink</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入不正确,应该输入1到7之间的数字"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;学习思路&quot;&gt;&lt;a href=&quot;#学习思路&quot; class=&quot;headerlink&quot; title=&quot;学习思路&quot;&gt;&lt;/a&gt;学习思路&lt;/h2&gt;&lt;h3&gt;
为了彻底掌握链表，我决定写一个用链表实现的学生管理系统，其中有链表的增删改查和显示菜单界面，当把这些链表常用的操作都练熟</summary>
      
    
    
    
    <category term="数据结构" scheme="https://yswm-m.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="练习" scheme="https://yswm-m.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="再战" scheme="https://yswm-m.github.io/tags/%E5%86%8D%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>数据结构再战—单链表</title>
    <link href="https://yswm-m.github.io/posts/23.html"/>
    <id>https://yswm-m.github.io/posts/23.html</id>
    <published>2022-09-23T01:45:00.000Z</published>
    <updated>2022-09-27T02:23:09.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习思路"><a href="#学习思路" class="headerlink" title="学习思路"></a>学习思路</h2><h3>所谓单链表实际上就是通过指针将多个不同不连续的节点链接起来，每个节点都存储着不同的值，很多人在学习的过程中容易搞混指针和节点之间的关系，实际上只要记住一点：没有被分配空间的指针就不能算是节点，指针可以改变节点的指向，也可以改变节点的值，也可以通过循环在多个节点之间游走，但是它没有被 new 分配空间，那么就永远不是节点</h3><h3>给指针分配空间：</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp">这是一个结构体指针<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>head<span class="token punctuation">;</span>给指针分配空间head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">;</span> 创建另一个结构体指针<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>另一个指针指向head所维护的那块内存p <span class="token operator">=</span> head<span class="token punctuation">;</span>当指针被分配空间后它就成为了一个节点，可以通过head<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token number">1</span> 的方式给节点赋值，也可以创建另一个指针指向这个节点，当另一个指针指向这个节点并不是指向这个head指针本身，而是指向head指针所分配的那块空间，也可以理解为共同指向head指针所指向的节点指针向后移动，p<span class="token operator">-&gt;</span>next 代表当前节点所保存的下一个节点的地址，p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next 代表指针p移动到下一个节点p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token comment">// struct Node *prior; //加入这条语句即可把单链表变成双链表</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">*</span> Link<span class="token punctuation">,</span> Node<span class="token punctuation">;</span>Link <span class="token function">createNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token comment">//头插法,最后得到的链表的数据顺序与数组是相反的</span><span class="token punctuation">{</span>    Link head <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Link node <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>        <span class="token comment">//每次都是在head的后面新增一个节点,而不是在新增节点的后面,所以最后得到的链表顺序与数组是相反的</span>        node<span class="token operator">-&gt;</span>data <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// node节点的指针域指向head的指针域,而head的指针域为NULL,也就是node的指针域指向NULL</span>        node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token comment">//最后当node的指针域指向NULL后,将head的指针域与NULL的链接断开,指向新的节点,这样既完成了头部插入</span>        head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span>Link <span class="token function">newList</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token comment">//尾插法,最后得到的链表顺序与数组一致</span><span class="token punctuation">{</span>    <span class="token comment">//创建头节点</span>    Link head <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">//创建一个新的指针指向头节点</span>    Link rear <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Link node <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>        node<span class="token operator">-&gt;</span>data <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// node-&gt;next = NULL; //如果没有写这条语句,那么就要在最后面补上rear-&gt;next = NULL;</span>        <span class="token comment">//将新的指针的指针域指向新的节点,而新的指针原本指向的是head头节点,也就是让head头节点的指针域指向新的节点</span>        rear<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token comment">//最后让新的指针指向新的节点,这样就完成了插入</span>        rear <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//如果插入到最后没有数据了,将新的指针的指针域指向NULL,而新的指针这时指向的一定是最后一个新的节点,也就是让最后一个新的节点的指针域指向NULL</span>    rear<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">// rear-&gt;next = head; //将上面的语句替换为这条语句即可将链表变成循环链表,对应的要将循环判断条件变成：p!=head,p-&gt;next!=head</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">insertNode</span><span class="token punctuation">(</span>Link head<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token comment">//插入节点</span><span class="token punctuation">{</span>    Link p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//创建一个新的节点</span>    Link node <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>    node<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token comment">//让新节点的指针域指向p的指针域,而p的指针域保存的是后一个节点的地址,也就是等于让新节点的指针域指向后一个节点</span>    node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token comment">//然后当新节点的指针域指向后一个节点后,让p的指针域和后一个节点的链接断开,指向新节点,这样既完成了插入</span>    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>Link head<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token comment">//删除节点</span><span class="token punctuation">{</span>    <span class="token comment">//如果传入的是一个空表,或者只有一个头节点,就直接返回false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//创建两个指针p和q,p指向的是头节点的下一个节点,q指向的是头节点,q永远指向p的前一个节点,p永远指向q的下一个节点</span>    Link p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> q <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">//如果p不为空就一直往下查找</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//如果p的数据域等于x就代表找到了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>data <span class="token operator">==</span> x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//将q的指针域指向p的指针域,而p的指针域指向的是下一个节点,也就是将q的指针域指向p的下一个节点,这样的话p的前一个节点与p指向的节点的链接就断掉了</span>            q<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token comment">//然后释放p所指向的节点</span>            <span class="token keyword">delete</span> p<span class="token punctuation">;</span>            <span class="token comment">//这样便成功删除了一个节点</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment">//如果没有查找到,则q指向p所在的节点,而p所在的节点是q原本指向的节点的下一个节点,这样便实现了q一直随着p往后移动</span>            q <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token comment">// p重新指向下一个节点</span>            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//如果都没有找到则说明链表中没有x这个节点,返回false</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printNode</span><span class="token punctuation">(</span>Link head<span class="token punctuation">)</span> <span class="token comment">//打印链表</span><span class="token punctuation">{</span>    Link p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clearLink</span><span class="token punctuation">(</span>Link head<span class="token punctuation">)</span> <span class="token comment">//释放链表</span><span class="token punctuation">{</span>    <span class="token comment">//如果head不为空,也就是head指向的不是最后一个节点的后一个节点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> head<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//新建一个节点q指向head所在的节点</span>        Link q <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">// head往后移动一位</span>        head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token comment">//删除q指向的节点,而q指向的节点是原本head指向的节点,也就是删除head原本指向的节点</span>        <span class="token keyword">delete</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// Link p = createNode(a, n); //头插法</span>    Link p <span class="token operator">=</span> <span class="token function">newList</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insertNode</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">deleteNode</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printNode</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clearLink</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printNode</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;学习思路&quot;&gt;&lt;a href=&quot;#学习思路&quot; class=&quot;headerlink&quot; title=&quot;学习思路&quot;&gt;&lt;/a&gt;学习思路&lt;/h2&gt;&lt;h3&gt;
所谓单链表实际上就是通过指针将多个不同不连续的节点链接起来，每个节点都存储着不同的值，很多人在学习的过程中容易搞混指针和</summary>
      
    
    
    
    <category term="数据结构" scheme="https://yswm-m.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="练习" scheme="https://yswm-m.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="再战" scheme="https://yswm-m.github.io/tags/%E5%86%8D%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>货仓选址 (每日一题)</title>
    <link href="https://yswm-m.github.io/posts/22.html"/>
    <id>https://yswm-m.github.io/posts/22.html</id>
    <published>2022-09-22T01:30:00.000Z</published>
    <updated>2022-10-17T01:30:34.563Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原题链接-AcWing"><a href="#原题链接-AcWing" class="headerlink" title="原题链接: AcWing"></a>原题链接: <a href="https://www.acwing.com/problem/content/description/106/">AcWing</a></h4><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><h4>在一条数轴上有 N 家商店，它们的坐标分别为 A1∼AN。现在需要在数轴上建立一家货仓，每天清晨，从货仓到每家商店都要运送一车商品。为了提高效率，求把货仓建在何处，可以使得货仓到每家商店的距离之和最小。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><h4>第一行输入整数 N。第二行 N 个整数 A1∼AN。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><h4>输出一个整数，表示距离之和的最小值。</h4><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><h4>1 ≤ N ≤ 100000,0 ≤ Ai ≤ 40000</h4><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">46 2 9 1</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">12</code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h3><h4>这道题是一个贪心问题，需要用到数学里的绝对值不等式，其实拆开来看就是一个求排序后数组中位数的差的题，因为要想距离这些商店都短，那么必然要在他们的距离之间寻求一个中位数，中位数有非常优秀的性质，比如说在这道题目中，每一个点到中位数的距离，都是满足全局的最有性，而不是局部最优性。</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> q <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        res <span class="token operator">+=</span> <span class="token function">abs</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> q<span class="token punctuation">[</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//统计和中位数之间的差</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;原题链接-AcWing&quot;&gt;&lt;a href=&quot;#原题链接-AcWing&quot; class=&quot;headerlink&quot; title=&quot;原题链接: AcWing&quot;&gt;&lt;/a&gt;原题链接: &lt;a href=&quot;https://www.acwing.com/problem/conten</summary>
      
    
    
    
    <category term="刷题" scheme="https://yswm-m.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="练习" scheme="https://yswm-m.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="每日一题" scheme="https://yswm-m.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>招聘 (每日一题)</title>
    <link href="https://yswm-m.github.io/posts/21.html"/>
    <id>https://yswm-m.github.io/posts/21.html</id>
    <published>2022-09-21T03:26:00.000Z</published>
    <updated>2022-10-17T01:28:07.137Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原题链接-AcWing"><a href="#原题链接-AcWing" class="headerlink" title="原题链接: AcWing"></a>原题链接: <a href="https://www.acwing.com/problem/content/description/1457/">AcWing</a></h4><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><h4>某公司招聘，有 n 个人入围，HR在黑板上依次写下 m 个正整数 A1,A2,…Am，然后这 n 个人围成一个圈，并按照顺时针顺序为他们编号 0,1,2,…n−1。录取规则是：第一轮从 0 号的人开始，取用黑板上的第 1 个数字，也就是 A1。黑板上的数字按次序循环使用，即如果某轮用了第 k 个，如果 k &lt; m，则下一轮需要用第 k+1 个；如果 k=m，则下一轮用第 1 个。每一轮按照黑板上的次序取用到一个数字 Ax，淘汰掉从当前轮到的人开始按照顺时针顺序数到的第 Ax 个人。下一轮开始时轮到的人即为被淘汰掉的人的顺时针顺序下一个人，被淘汰的人直接回家，所以不会被后续轮次计数时数到。经过 n−1 轮后，剩下的最后 1 人被录取，所以最后被录取的人的编号与 (n,m,A1,A2,…Am) 相关。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><h4>输入包含多组测试数据。第一行包含整数 T，表示共有 T 组测试数据。接下来 T 行，每行包含若干个整数，依次存放 n,m,A1,A2,…Am，表示一组数据。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><h4>输出共 T 行，每行对应相应的那组数据确定的录取之人的编号。</h4><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><h4>0 &lt; T &lt; 10,0 &lt; m, Ax &lt; 10^3,0 &lt; n &lt; 10^7</h4><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">14 2 3 1</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">1</code></pre><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><h4>样例里只有 1 组测试数据，说的是有 4 人入围（编号 0∼3）。黑板上依次写下 2 个数字：3、1，那么：第一轮：当前轮到 0 号，数到数字 3，顺时针数第 3 个人是 2 号，所以淘汰 2 号，下一轮从 3 号开始，目前剩余：0、1、3；第二轮：当前数到 3 号，取到数字 1，顺时针数第 1 个人是 3 号，所以淘汰 3 号，下一轮从 0 号开始，目前剩余：0、1；第三轮：当前轮到 0 号，循环取到数字 3，顺时针数第 3 个人是 0 号，所以淘汰 0 号，最后只剩下 1 号，所以录取 1 号，输出 1；</h4><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h3><h4>这道题是一个典型的约瑟夫环问题，不同的就是把报数从3变成了另一个循环的数组，虽然可以依靠循环链表直接模拟出来，但是由于数据范围过大，用链表模拟会超时，因为链表的 new 操作是非常慢的，所以只能依靠数组，但是我在尝试了用数组模拟循环链表后依旧超时，这时就只有依靠数学方法了，看来数学是一个永远绕不过去的坑，只有接受它才能让我继续前进。</h4><h4 id="循环链表模拟代码-（超时，通过6-10个数据）"><a href="#循环链表模拟代码-（超时，通过6-10个数据）" class="headerlink" title="循环链表模拟代码:（超时，通过6/10个数据）"></a>循环链表模拟代码:（超时，通过6/10个数据）</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> answer<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">*</span>PQ<span class="token punctuation">,</span>st<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>t<span class="token punctuation">,</span>i<span class="token punctuation">,</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    PQ head<span class="token punctuation">,</span>tail<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token keyword">new</span> st<span class="token punctuation">;</span>    head<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>        tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> <span class="token keyword">new</span> st<span class="token punctuation">;</span>            p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> i<span class="token punctuation">;</span>            tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            tail <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>answer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        q <span class="token operator">=</span> tail<span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        count <span class="token operator">=</span> answer<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>q<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>count<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                q<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>                <span class="token keyword">delete</span> p<span class="token punctuation">;</span>                p <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>                i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                pos <span class="token operator">=</span> <span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>m<span class="token punctuation">;</span>                count <span class="token operator">=</span> answer<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                q <span class="token operator">=</span> p<span class="token punctuation">;</span>                p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-&gt;</span>data<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">delete</span> p<span class="token punctuation">;</span>        head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span> head<span class="token punctuation">;</span>    <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="数学方法是几种约瑟夫环解法里面最简短的，同时也是最难理解的，我本人也是理解不了，不过也许若干年后再回来看时就能够理解了"><a href="#数学方法是几种约瑟夫环解法里面最简短的，同时也是最难理解的，我本人也是理解不了，不过也许若干年后再回来看时就能够理解了" class="headerlink" title="数学方法是几种约瑟夫环解法里面最简短的，同时也是最难理解的，我本人也是理解不了，不过也许若干年后再回来看时就能够理解了"></a>数学方法是几种约瑟夫环解法里面最简短的，同时也是最难理解的，我本人也是理解不了，不过也许若干年后再回来看时就能够理解了</h3><h4 id="数学方法实现代码："><a href="#数学方法实现代码：" class="headerlink" title="数学方法实现代码："></a>数学方法实现代码：</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*约瑟夫环递推公式：    f(1) = 0;     //表示最后一轮的胜出者当前编号是0    f(x) = (f(x - 1) + m) % x , 1 &lt; x &lt;= n //每一轮都找到胜出者在上一轮中的编号    不过本题里m是在变化的，所以要相应地变为：==&gt; f(x) = (f(x - 1) + a[(n - x) % m]) % x, 1 &lt; x &lt;= n*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>            ret <span class="token operator">=</span> <span class="token punctuation">(</span>ret <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;原题链接-AcWing&quot;&gt;&lt;a href=&quot;#原题链接-AcWing&quot; class=&quot;headerlink&quot; title=&quot;原题链接: AcWing&quot;&gt;&lt;/a&gt;原题链接: &lt;a href=&quot;https://www.acwing.com/problem/conten</summary>
      
    
    
    
    <category term="刷题" scheme="https://yswm-m.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="练习" scheme="https://yswm-m.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="每日一题" scheme="https://yswm-m.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>击中战舰 (每日一题)</title>
    <link href="https://yswm-m.github.io/posts/20.html"/>
    <id>https://yswm-m.github.io/posts/20.html</id>
    <published>2022-09-20T02:26:00.000Z</published>
    <updated>2022-10-17T01:27:53.959Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原题链接-AcWing"><a href="#原题链接-AcWing" class="headerlink" title="原题链接: AcWing"></a>原题链接: <a href="https://www.acwing.com/problem/content/description/4619/">AcWing</a></h4><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><h4>李华在玩一款叫做《海战》的小游戏，下面是游戏介绍。给定一个 1×n 的方格矩阵，方格从左到右依次编号为 1∼n。在这个方格矩阵中，隐藏着 a 个战舰。每个战舰都占据 b 个连续的方格，每个方格最多只能被一个战舰占据。每个战舰的具体位置未知。玩家的任务就是在这种情况下，向一些方格发动精确打击，如果受到精确打击的方格被某个战舰占据着，则视为击中该战舰。李华已经向 k 个方格发动了精确打击，不幸的是，一个战舰都没有击中。请你计算，他至少还需要向多少个方格发动精确打击，才能确保自己可以至少击中一个战舰。请给出一个具体方案。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><h4>第一行包含 4 个整数 n,a,b,k。第二行包含一个长度为 n 的 01 字符串，如果第 i 个字符为 1，则表示第 i 个方格已经受到了精确打击，如果第 i 个字符为 0，则表示第 i 个方格还未受到精确打击。保证字符 1 恰好出现 k 次。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><h4>第一行输出李华还需要发动精确打击的最少方格数量。第二行输出李华还需要发动精确打击的方格的具体编号，具体输出顺序随意。如果方案不唯一，输出任意合理方案均可。</h4><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><h4>前 3 个测试点满足 1 ≤ n ≤ 13。所有测试点满足 1 ≤ n ≤ 2×10^5，1 ≤ a, b ≤ n，0 ≤ k ≤ n−1。</h4><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">5 1 2 100100</code></pre><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">24 2</code></pre><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">13 3 2 31000000010001</code></pre><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">27 11</code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h3><h4>这道题是一个模拟题，理解了题意之后发现：只需要遍历把所有能加的战舰就加到数组里，结束时战舰数量−a+1−a+1就是答案，也就是说先把那个所有连续的0算一下，计算可以存放多少个战舰，因为是至少，所以我们假设我们的运气最差，前p.size()-a都没有战舰，那么p.size()-a+1肯定会有战舰。</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> b<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//之所以加1是因为下标是从0开始</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>             cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>               <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;原题链接-AcWing&quot;&gt;&lt;a href=&quot;#原题链接-AcWing&quot; class=&quot;headerlink&quot; title=&quot;原题链接: AcWing&quot;&gt;&lt;/a&gt;原题链接: &lt;a href=&quot;https://www.acwing.com/problem/conten</summary>
      
    
    
    
    <category term="刷题" scheme="https://yswm-m.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="练习" scheme="https://yswm-m.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="每日一题" scheme="https://yswm-m.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>相遇问题 (每日一题)</title>
    <link href="https://yswm-m.github.io/posts/19.html"/>
    <id>https://yswm-m.github.io/posts/19.html</id>
    <published>2022-09-19T02:26:00.000Z</published>
    <updated>2022-10-17T01:26:44.225Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原题链接-AcWing"><a href="#原题链接-AcWing" class="headerlink" title="原题链接: AcWing"></a>原题链接: <a href="https://www.acwing.com/problem/content/description/4618/">AcWing</a></h4><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><h4>在一个一维数轴的 x 位置处站着甲，y 位置处站着乙，其中 x<y。 两人沿着数轴同时出发，相向而行="" ，甲每秒的移动距离为="" a，乙每秒的移动距离为="" b。="" 请问，多少秒后，两人相遇。="" <="" h4=""><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><h4>第一行包含整数 T，表示共有 T 组测试数据。每组数据占一行，包含四个整数 x,y,a,b。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><h4>如果答案为整数秒，则输出答案，否则输出 −1。</h4><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><h4>前 3 个测试点满足 1 ≤ T ≤ 10。所有测试点满足 1 ≤ T ≤ 1000，0 ≤ x &lt; y ≤ 109，1 ≤ a, b ≤ 109。</h4><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">50 10 2 30 10 3 3900000000 1000000000 1 99999991 2 1 11 3 1 1</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">2-110-11</code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h3><h4>这道题是一个推公式题，利用小学数学就可以推，用 x 和 y 的 路程差 除以 速度和 就可以得到结果，然后按照题意用if求余判断是否是整数秒，是就输出，不是则输出 -1。</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>x<span class="token operator">&gt;&gt;</span>y<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//得数为整</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></y。></h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;原题链接-AcWing&quot;&gt;&lt;a href=&quot;#原题链接-AcWing&quot; class=&quot;headerlink&quot; title=&quot;原题链接: AcWing&quot;&gt;&lt;/a&gt;原题链接: &lt;a href=&quot;https://www.acwing.com/problem/conten</summary>
      
    
    
    
    <category term="刷题" scheme="https://yswm-m.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="练习" scheme="https://yswm-m.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="每日一题" scheme="https://yswm-m.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>回文日期 (每日一题)</title>
    <link href="https://yswm-m.github.io/posts/18.html"/>
    <id>https://yswm-m.github.io/posts/18.html</id>
    <published>2022-09-18T04:14:00.000Z</published>
    <updated>2022-10-17T01:26:20.681Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原题链接-AcWing"><a href="#原题链接-AcWing" class="headerlink" title="原题链接: AcWing"></a>原题链接: <a href="https://www.acwing.com/problem/content/description/468/">AcWing</a></h4><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><h4>在日常生活中，通过年、月、日这三个要素可以表示出一个唯一确定的日期。牛牛习惯用 8 位数字表示一个日期，其中，前 4 位代表年份，接下来 2 位代表月份，最后 2 位代表日期。显然：一个日期只有一种表示方法，而两个不同的日期的表示方法不会相同。牛牛认为，一个日期是回文的，当且仅当表示这个日期的 8 位数字是回文的。现在，牛牛想知道：在他指定的两个日期之间（包含这两个日期本身），有多少个真实存在的日期是回文的。一个 8 位数字是回文的，当且仅当对于所有的 i(1≤i≤8) 从左向右数的第 i 个数字和第 9−i 个数字（即从右向左数的第 i 个数字）是相同的。例如：- 对于 2016 年 11 月 19 日，用 8 位数字 20161119 表示，它不是回文的。- 对于 2010 年 1 月 2 日，用 8 位数字 20100102 表示，它是回文的。- 对于 2010 年 10 月 2 日，用 8 位数字 20101002 表示，它不是回文的。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><h4>输入包括两行，每行包括一个 8 位数字。第一行表示牛牛指定的起始日期 date1，第二行表示牛牛指定的终止日期 date2。保证 date1 和 date2 都是真实存在的日期，且年份部分一定为 4 位数字，且首位数字不为 0。保证 date1 一定不晚于 date2。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><h4>输出共一行，包含一个整数，表示在 date1 和 date2 之间，有多少个日期是回文的。</h4><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><h4>1≤N≤10^4</h4><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">2011010120111231</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">1</code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h3><h4>这道题是一个大模拟题，题目比较长，需要看得比较久，当看懂了题目后会发现其实就是一个给定两个任意日期求之间的时间是否是回文的题，那么就要考虑年月日的情况，有平年闰年，大月小月，我们可以用一个全局数组将可能用到的日期存放起来，然后通过求余的方法求出当前日期的所在年月日，然后判断是否是平年闰年，最后按照要求判断是否是回文日期</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> months<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> year <span class="token operator">=</span> date <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> month <span class="token operator">=</span> date <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> day <span class="token operator">=</span> date <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>month <span class="token operator">||</span> month <span class="token operator">&gt;=</span> <span class="token number">13</span> <span class="token operator">||</span> <span class="token operator">!</span>day<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> day <span class="token operator">&gt;</span> months<span class="token punctuation">[</span>month<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">bool</span> leap <span class="token operator">=</span> year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">&gt;</span> <span class="token number">28</span> <span class="token operator">+</span> leap<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> date1<span class="token punctuation">,</span> date2<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> date1 <span class="token operator">&gt;&gt;</span> date2<span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> i<span class="token punctuation">,</span> r <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span> r <span class="token operator">=</span> r <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;=</span> date1 <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> date2 <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">++</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;原题链接-AcWing&quot;&gt;&lt;a href=&quot;#原题链接-AcWing&quot; class=&quot;headerlink&quot; title=&quot;原题链接: AcWing&quot;&gt;&lt;/a&gt;原题链接: &lt;a href=&quot;https://www.acwing.com/problem/conten</summary>
      
    
    
    
    <category term="刷题" scheme="https://yswm-m.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="练习" scheme="https://yswm-m.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="每日一题" scheme="https://yswm-m.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>性感素数 (每日一题)</title>
    <link href="https://yswm-m.github.io/posts/17.html"/>
    <id>https://yswm-m.github.io/posts/17.html</id>
    <published>2022-09-17T01:45:00.000Z</published>
    <updated>2022-10-17T01:25:46.109Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原题链接-AcWing"><a href="#原题链接-AcWing" class="headerlink" title="原题链接: AcWing"></a>原题链接: <a href="https://www.acwing.com/problem/content/description/4271/">AcWing</a></h4><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><h4>“性感素数 ”是指形如 (p,p+6) 这样的一对素数。之所以叫这个名字，是因为拉丁语管“六”叫“sex”（即英语的“性感”）。现给定一个整数，请你判断其是否为一个性感素数。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><h4>输入在一行中给出一个正整数 N。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><h4>若 N 是一个性感素数，则在一行中输出 Yes，并在第二行输出与 N 配对的另一个性感素数（若这样的数不唯一，输出较小的那个）。若 N 不是性感素数，则在一行中输出 No，然后在第二行输出大于 N 的最小性感素数。</h4><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><h4>1≤N≤10^8</h4><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">47</code></pre><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">Yes41</code></pre><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">21</code></pre><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">No23</code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h3><h4>这道题是一个素数筛题，因为数据范围不大不小，所以用普通的暴力肯定会超时，那么我们可以利用素数的特性，判断一个数是不是素数，只需要判断n的根号前几个数即可。因为素数的特性是除了1和它本身之外不能被其它任何数整除，如果一个数不是素数是合数，那么一定可以由两个自然数相乘得到，其中一个大于或等于它的平方根，一个小于或等于它的平方根。并且成对出现，所以只用计算到该数的平方根以下看除了1有没有该数的因数，若没有，则是素数。</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">/</span>i<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//这里for循环的终止条件利用了试除法，也可以改为i&lt;=sqrt(n);直接求根号</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">fun</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>               <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="除了上面的方法外，素数判断还有其他更快的方法："><a href="#除了上面的方法外，素数判断还有其他更快的方法：" class="headerlink" title="除了上面的方法外，素数判断还有其他更快的方法："></a>除了上面的方法外，素数判断还有其他更快的方法：</h3><h3 id="这里引入一个经典的题目："><a href="#这里引入一个经典的题目：" class="headerlink" title="这里引入一个经典的题目："></a>这里引入一个经典的题目：</h3><h4 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a><a href="https://www.acwing.com/problem/content/description/870/">原题链接</a></h4><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述:"></a>题目描述:</h3><h4>给定一个正整数 n，请你求出 1∼n 中素数的个数。</h4><h3 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h3><h4 id="1≤n≤10-6"><a href="#1≤n≤10-6" class="headerlink" title="1≤n≤10^6"></a>1≤n≤10^6</h4><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">普通筛法</button></li><li class="tab"><button type="button" data-href="#test1-2">埃氏筛法</button></li><li class="tab"><button type="button" data-href="#test1-3">线性筛法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><h3 id="普通筛法：O-nlogn"><a href="#普通筛法：O-nlogn" class="headerlink" title="普通筛法：O(nlogn)"></a>普通筛法：O(nlogn)</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            q<span class="token punctuation">[</span>ans<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//把素数存起来</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">+=</span>i<span class="token punctuation">)</span> <span class="token comment">//不管是合数还是质数，都用来筛掉后面它的倍数</span>            <span class="token punctuation">{</span>                st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//可以用质数就把所有的合数都筛掉；</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><h3 id="埃氏筛法：O-nloglogn"><a href="#埃氏筛法：O-nloglogn" class="headerlink" title="埃氏筛法：O(nloglogn)"></a>埃氏筛法：O(nloglogn)</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">get_primes1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            primes<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">+=</span>i<span class="token punctuation">)</span> st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//可以用质数就把所有的合数都筛掉；</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><h3 id="线性筛法：-O-n"><a href="#线性筛法：-O-n" class="headerlink" title="线性筛法： O(n)"></a>线性筛法： O(n)</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//外层从2~n迭代，因为这毕竟算的是1~n中质数的个数，而不是某个数是不是质数的判定</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> primes<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token operator">/</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//primes[j]&lt;=n/i:变形一下得到——primes[j]*i&lt;=n,把大于n的合数都筛了就</span>        <span class="token comment">//没啥意义了</span>            st<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//用最小质因子去筛合数</span>            <span class="token comment">//1)当i%primes[j]!=0时,说明此时遍历到的primes[j]不是i的质因子，那么只可能是此时的primes[j]&lt;i的</span>            <span class="token comment">//最小质因子,所以primes[j]*i的最小质因子就是primes[j];</span>            <span class="token comment">//2)当有i%primes[j]==0时,说明i的最小质因子是primes[j],因此primes[j]*i的最小质因子也就应该是</span>            <span class="token comment">//prime[j]，之后接着用st[primes[j+1]*i]=true去筛合数时，就不是用最小质因子去更新了,因为i有最小</span>            <span class="token comment">//质因子primes[j]&lt;primes[j+1],此时的primes[j+1]不是primes[j+1]*i的最小质因子，此时就应该</span>            <span class="token comment">//退出循环，避免之后重复进行筛选。</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;原题链接-AcWing&quot;&gt;&lt;a href=&quot;#原题链接-AcWing&quot; class=&quot;headerlink&quot; title=&quot;原题链接: AcWing&quot;&gt;&lt;/a&gt;原题链接: &lt;a href=&quot;https://www.acwing.com/problem/conten</summary>
      
    
    
    
    <category term="刷题" scheme="https://yswm-m.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="练习" scheme="https://yswm-m.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="每日一题" scheme="https://yswm-m.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>方格跳跃 (每日一题)</title>
    <link href="https://yswm-m.github.io/posts/16.html"/>
    <id>https://yswm-m.github.io/posts/16.html</id>
    <published>2022-09-16T01:12:00.000Z</published>
    <updated>2022-10-17T01:25:26.744Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原题链接-AcWing"><a href="#原题链接-AcWing" class="headerlink" title="原题链接: AcWing"></a>原题链接: <a href="https://www.acwing.com/problem/content/4616/">AcWing</a></h4><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><h4>小朋友们在玩跳方格游戏。n 个方格排成一排，从左到右依次编号为 1∼n。每个方格中都标有一个方向箭头，箭头分为两种："&gt;" 和 "&lt;"。"&gt;" 表示进入方格的小朋友需要向右跳动一格距离，"&lt;" 表示进入方格的小朋友需要向左跳动一格距离。初始时，小朋友需要选择任意一个方格作为自己的初始位置，并从初始位置开始，按照每个方格的指示跳跃方向进行连续跳跃。如果小朋友可以跳到界外，则视为赢得游戏胜利。请你计算，为了赢得游戏胜利，共有多少个方格可以作为初始位置。例如，当 n=4 且每个方格中的箭头方向依次为 &lt;&lt;&gt;&lt; 时，选择第 1 个或第 2 个方格作为初始位置，均可以跳到（左侧）界外，而选择第 3 个或第 4 个方格作为初始位置，则会陷入无限反复横跳，无法跳出界外，所以共有 2 个方格可以作为初始位置。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><h4>第一行包含整数 n。第二行包含一个长度为 n 的由 &lt; 和 &gt; 构成的字符串，其中第 i 个字符表示第 i 个方格中的方向箭头。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><h4>一个整数，表示可以作为初始位置的方格数量。</h4><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><h4>前 3 个测试点满足 1≤n≤10。所有测试点满足 1≤n≤2×10^5。</h4><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">4&lt;&lt;&gt;&lt;</code></pre><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">2</code></pre><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">5&gt;&gt;&gt;&gt;&gt;</code></pre><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">5</code></pre><h3 id="输入样例3："><a href="#输入样例3：" class="headerlink" title="输入样例3："></a>输入样例3：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">4&gt;&gt;&lt;&lt;</code></pre><h3 id="输出样例3："><a href="#输出样例3：" class="headerlink" title="输出样例3："></a>输出样例3：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">0</code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h3><h4>这道题实际上是一个思维题，一开始我还以为是什么大模拟之类的，后面发现其实就是从左边出的必须一直向左，右边出同理必须一直向右，否则就会陷入死循环，那么就只需要把从左边出的和从右边出的加起来就好了。</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'&lt;'</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'&gt;'</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;原题链接-AcWing&quot;&gt;&lt;a href=&quot;#原题链接-AcWing&quot; class=&quot;headerlink&quot; title=&quot;原题链接: AcWing&quot;&gt;&lt;/a&gt;原题链接: &lt;a href=&quot;https://www.acwing.com/problem/conten</summary>
      
    
    
    
    <category term="刷题" scheme="https://yswm-m.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="练习" scheme="https://yswm-m.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="每日一题" scheme="https://yswm-m.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>去掉0 (每日一题)</title>
    <link href="https://yswm-m.github.io/posts/15.html"/>
    <id>https://yswm-m.github.io/posts/15.html</id>
    <published>2022-09-16T00:18:00.000Z</published>
    <updated>2022-10-17T01:24:53.712Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原题链接-AcWing"><a href="#原题链接-AcWing" class="headerlink" title="原题链接: AcWing"></a>原题链接: <a href="https://www.acwing.com/problem/content/4615/">AcWing</a></h4><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h3><h4>给定一个字符串 s，其中的每个字符要么是 1，要么是 0。我们希望字符串中的所有 1 能够形成一个连续的子串，例如，字符串 0、1、00111、01111100 均满足此条件，而字符串 0101、100001、11111111111101 均不满足此条件。你可以从字符串中删除一些（也可以不删）0，使得字符串满足上述条件。请问，你必须删除的最小 0 数量是多少。</h4><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><h4>第一行包含整数 T，表示共有 T 组测试数据。每组数据占一行，包含一个 01 字符串 s。</h4><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><h4>每组数据输出一行结果，一个整数，表示必须删除的最小 0 数量。</h4><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><h4>前 3 个测试点满足 1≤T≤10，所有测试点满足 1≤T≤100，1≤|s|≤100。</h4><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">301001101111000</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre class="language-plaintext" data-language="plaintext"><code class="language-plaintext">200</code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h3><h4>这道题咋一看像是那种求最长连续或不连续子串的类型的题，还以为可能会用到双指针算法，现在看来其实题目已经给了可以直接暴力求解的办法，既然说了可以不删除 0，那么实际上只要求出字符串中从左往右开始遇到第一个 1 之后到最后一个 1 之间的 0 的个数就行了，省略掉前面和末尾的 0，只用一个变量来对 1 之间的所有的 0 计数，最后得到的就是答案。</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string s<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>m<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                n<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>n<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;原题链接-AcWing&quot;&gt;&lt;a href=&quot;#原题链接-AcWing&quot; class=&quot;headerlink&quot; title=&quot;原题链接: AcWing&quot;&gt;&lt;/a&gt;原题链接: &lt;a href=&quot;https://www.acwing.com/problem/conten</summary>
      
    
    
    
    <category term="刷题" scheme="https://yswm-m.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="练习" scheme="https://yswm-m.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="每日一题" scheme="https://yswm-m.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>单片机教程</title>
    <link href="https://yswm-m.github.io/posts/14.html"/>
    <id>https://yswm-m.github.io/posts/14.html</id>
    <published>2022-09-15T02:58:00.000Z</published>
    <updated>2022-09-30T08:46:25.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="嵌入式自学之旅开始！"><a href="#嵌入式自学之旅开始！" class="headerlink" title="嵌入式自学之旅开始！"></a>嵌入式自学之旅开始！</h1><h3 id="视频链接"><a href="#视频链接" class="headerlink" title="视频链接"></a><a href="https://www.bilibili.com/video/BV1Mb411e7re?share_source=copy_web&amp;vd_source=dce78a50a19b17e013b66f467ec9b153">视频链接</a></h3><h2>本教程用的单片机是C51的单片机，用的代码编写软件是keil，想要更进一步的可以直接买STM32的单片机</h2><h2 id="前置知识（常用的变量位数）："><a href="#前置知识（常用的变量位数）：" class="headerlink" title="前置知识（常用的变量位数）："></a>前置知识（常用的变量位数）：</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token comment">//16位(单片机)，一般计算机上的int都是32位，前面的unsigned代表无符号，无符号int的范围是0~65535</span><span class="token keyword">short</span> <span class="token comment">//16位 -32768~32767</span><span class="token keyword">long</span> <span class="token comment">//32位 -2147483648~2147483647</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token comment">//32位 0~4294967295</span><span class="token keyword">float</span> <span class="token comment">//32位 3.4e-38~3.4e38</span><span class="token keyword">double</span> <span class="token comment">//64位 1.7e-308~1.7e308</span><span class="token keyword">char</span> <span class="token comment">//8位 -128~127</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token comment">//8位 0~255</span></code></pre><h2 id="实战代码"><a href="#实战代码" class="headerlink" title="实战代码:"></a>实战代码:</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//要驱动52的开发板必须要引入这个头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token comment">//用_nop_()函数需要用到这个头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;INTRINS.H&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//0亮 1不亮</span>        <span class="token comment">//让第一个LED亮起</span>        P2 <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span> <span class="token comment">//1111 1110</span>        <span class="token comment">//延时500毫秒,也就是半秒</span>        <span class="token function">Delaylms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//让第二个亮起</span>        P2 <span class="token operator">=</span> <span class="token number">0xFD</span><span class="token punctuation">;</span> <span class="token comment">//1111 1101</span>        <span class="token comment">//延时</span>        <span class="token function">Delaylms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//让第三个亮起</span>        P2 <span class="token operator">=</span> <span class="token number">0xFB</span><span class="token punctuation">;</span> <span class="token comment">//1111 1011</span>        <span class="token comment">//延时</span>        <span class="token function">Delaylms</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//让第四个亮起</span>        P2 <span class="token operator">=</span> <span class="token number">0xF7</span><span class="token punctuation">;</span> <span class="token comment">//1111 0111</span>        <span class="token comment">//延时</span>        <span class="token function">Delaylms</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//让第五个亮起</span>        P2 <span class="token operator">=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span> <span class="token comment">//1110 1111</span>        <span class="token comment">//延时</span>        <span class="token function">Delaylms</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//让第六个亮起</span>        P2 <span class="token operator">=</span> <span class="token number">0xDF</span><span class="token punctuation">;</span> <span class="token comment">//1101 1111</span>        <span class="token comment">//延时</span>        <span class="token function">Delaylms</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//让第七个亮起</span>        P2 <span class="token operator">=</span> <span class="token number">0xBF</span><span class="token punctuation">;</span> <span class="token comment">//1011 1111</span>        <span class="token comment">//延时</span>        <span class="token function">Delaylms</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//让第八个亮起</span>        P2 <span class="token operator">=</span> <span class="token number">0x7F</span><span class="token punctuation">;</span> <span class="token comment">//0111 1111</span>        <span class="token comment">//延时</span>        <span class="token function">Delaylms</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="keil配置"><a href="#keil配置" class="headerlink" title="keil配置"></a>keil配置</h2><h3>新建项目为:Microchip下的AT89C52</h3><h2 id="STC-lSP配置"><a href="#STC-lSP配置" class="headerlink" title="STC-lSP配置"></a>STC-lSP配置</h2><h3 id="单片机型号选择-STC89C52RC-LE52RC"><a href="#单片机型号选择-STC89C52RC-LE52RC" class="headerlink" title="单片机型号选择:STC89C52RC/LE52RC"></a>单片机型号选择:STC89C52RC/LE52RC</h3><h3 id="串口号选择-USB-SERTAL-CH340-COM5"><a href="#串口号选择-USB-SERTAL-CH340-COM5" class="headerlink" title="串口号选择:USB-SERTAL CH340(COM5)"></a>串口号选择:USB-SERTAL CH340(COM5)</h3><h3 id="打开程序文件，下载-编程到单片机"><a href="#打开程序文件，下载-编程到单片机" class="headerlink" title="打开程序文件，下载/编程到单片机"></a>打开程序文件，下载/编程到单片机</h3><h3 id="寄存器通过检测高低电平检测按键是否被按下"><a href="#寄存器通过检测高低电平检测按键是否被按下" class="headerlink" title="寄存器通过检测高低电平检测按键是否被按下"></a>寄存器通过检测高低电平检测按键是否被按下</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;嵌入式自学之旅开始！&quot;&gt;&lt;a href=&quot;#嵌入式自学之旅开始！&quot; class=&quot;headerlink&quot; title=&quot;嵌入式自学之旅开始！&quot;&gt;&lt;/a&gt;嵌入式自学之旅开始！&lt;/h1&gt;&lt;h3 id=&quot;视频链接&quot;&gt;&lt;a href=&quot;#视频链接&quot; class=&quot;head</summary>
      
    
    
    
    <category term="嵌入式" scheme="https://yswm-m.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="教程" scheme="https://yswm-m.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="笔记" scheme="https://yswm-m.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mongodb教程</title>
    <link href="https://yswm-m.github.io/posts/13.html"/>
    <id>https://yswm-m.github.io/posts/13.html</id>
    <published>2022-09-15T02:55:00.000Z</published>
    <updated>2022-09-30T08:30:08.526Z</updated>
    
    <content type="html"><![CDATA[<pre class="language-sql" data-language="sql"><code class="language-sql">安装mongodb数据库启动数据库：在cmd窗口下输入mongo查看数据库：<span class="token keyword">show</span> dbs进入数据库：<span class="token keyword">use</span> test创建数据库：首先先进入数据库：<span class="token keyword">use</span> test 然后向表中插入数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"age"</span>:<span class="token number">20</span>}<span class="token punctuation">)</span>查看当前数据库下的表：<span class="token keyword">show</span> collections查看表里面的内容：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span>删除数据库：首先先进入数据库：<span class="token keyword">use</span> test 然后输入:db<span class="token punctuation">.</span>dropDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span>删除一个表：db<span class="token punctuation">.</span>test02<span class="token punctuation">.</span><span class="token keyword">drop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 其中test02是表名查找指定数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"age"</span>:<span class="token string">"13"</span>}<span class="token punctuation">)</span> 查找年龄为<span class="token number">13</span>的人的数据<span class="token punctuation">,</span>db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token string">"zhangsan"</span>}<span class="token punctuation">)</span> 查找名字叫zhangsan的人的数据查找表里面年龄大于<span class="token number">22</span>的数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"age"</span>:{$gt:<span class="token string">"22"</span>}}<span class="token punctuation">)</span>查找表里面年龄小于<span class="token number">22</span>的数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"age"</span>:{$lt:<span class="token string">"22"</span>}}<span class="token punctuation">)</span>查找表里面年龄大于等于<span class="token number">22</span>的数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"age"</span>:{$gte:<span class="token string">"22"</span>}}<span class="token punctuation">)</span>查找表里面年龄小于等于<span class="token number">22</span>的数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"age"</span>:{$lte:<span class="token string">"22"</span>}}<span class="token punctuation">)</span>查找表里面年龄大于等于<span class="token number">23</span>且小于等于<span class="token number">26</span>的数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"age"</span>:{$gte:<span class="token string">"23"</span><span class="token punctuation">,</span>$lte:<span class="token string">"26"</span>}}<span class="token punctuation">)</span>模糊查询：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token operator">/</span>zhang<span class="token operator">/</span>}<span class="token punctuation">)</span> 查找表里面名字叫zhangsan的人模糊查询：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token operator">/</span>z<span class="token operator">/</span>}<span class="token punctuation">)</span> 查找表里面名字包含z的人模糊查询：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token operator">/</span><span class="token operator">^</span>z<span class="token operator">/</span>}<span class="token punctuation">)</span> 查找表里面名字以z为开头的人模糊查询：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token operator">/</span>n$<span class="token operator">/</span>}<span class="token punctuation">)</span> 查找表里面名字以n为结尾的人查询指定列年龄大于<span class="token number">20</span>的name的数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"age"</span>:{$gt:<span class="token string">"20"</span>}}<span class="token punctuation">,</span>{name:<span class="token number">1</span>}<span class="token punctuation">)</span>查询指定列年龄大于<span class="token number">20</span>的age的数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"age"</span>:{$gt:<span class="token string">"20"</span>}}<span class="token punctuation">,</span>{age:<span class="token number">1</span>}<span class="token punctuation">)</span>查询指定列 name age数据<span class="token punctuation">,</span>age<span class="token operator">&gt;</span><span class="token number">25</span> db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{age:{$gt:<span class="token string">"25"</span>}}<span class="token punctuation">,</span>{name:<span class="token number">1</span><span class="token punctuation">,</span>age:<span class="token number">1</span>}<span class="token punctuation">)</span>按照年龄升序排序：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>{age:<span class="token number">1</span>}<span class="token punctuation">)</span>按照年龄降序排序：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>{age:<span class="token operator">-</span><span class="token number">1</span>}<span class="token punctuation">)</span>查找的时候可以写多个条件：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{username:<span class="token string">'zhangsan'</span><span class="token punctuation">,</span>age:<span class="token string">"22"</span>}<span class="token punctuation">)</span> 名字既要是zhangsan<span class="token punctuation">,</span>年龄也要是<span class="token number">22</span>查询前<span class="token number">5</span>条数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>查询<span class="token number">10</span>条以后的数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>查询第<span class="token number">3</span>和第<span class="token number">4</span>条数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 查询<span class="token number">2</span>条以后的数据中的前两条数据往一个表里面新增<span class="token number">100</span>条数据：<span class="token keyword">for</span><span class="token punctuation">(</span>var i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>{    db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token string">"zhangsan"</span><span class="token operator">+</span>i<span class="token punctuation">,</span><span class="token string">"age"</span>:i}<span class="token punctuation">)</span>}<span class="token punctuation">;</span>查询当前表里面有多少条数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>分页查询：查询当前表第一页的<span class="token number">10</span>条数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>分页查询：查询当前表第二页的<span class="token number">10</span>条数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>分页查询：查询当前表第三页的<span class="token number">4</span>条数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">limit</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>查询名字叫做zhangsan1或zhangsan13的人 db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{$<span class="token operator">or</span>:<span class="token punctuation">[</span>{<span class="token string">"username"</span>:<span class="token string">"zhangsan1"</span>}<span class="token punctuation">,</span>{<span class="token string">"username"</span>:<span class="token string">"zhangsan13"</span>}<span class="token punctuation">]</span>}<span class="token punctuation">)</span>查询年龄是<span class="token number">13</span>或<span class="token number">21</span>的人 db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{$<span class="token operator">or</span>:<span class="token punctuation">[</span>{<span class="token string">"age"</span>:<span class="token number">13</span>}<span class="token punctuation">,</span>{<span class="token string">"age"</span>:<span class="token number">21</span>}<span class="token punctuation">]</span>}<span class="token punctuation">)</span>查询第一条数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>findOne<span class="token punctuation">(</span><span class="token punctuation">)</span>查询表里面年龄大于<span class="token number">60</span>的人的数量 db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"age"</span>:{$gt:<span class="token number">60</span>}}<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>将表中的zhangsan6修改成张三：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token string">"zhangsan6"</span>}<span class="token punctuation">,</span>{$<span class="token keyword">set</span>:{<span class="token string">"username"</span>:<span class="token string">"张三"</span>}}<span class="token punctuation">)</span>给表中姓名为张三<span class="token punctuation">,</span>年龄为<span class="token number">6</span>的人新增性别为男：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"age"</span>:<span class="token number">6</span>}<span class="token punctuation">,</span>{$<span class="token keyword">set</span>:{<span class="token string">"sex"</span>:<span class="token string">"男"</span>}}<span class="token punctuation">)</span>将表中姓名为张三的人的年龄修改成<span class="token number">58</span>：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token string">"张三"</span>}<span class="token punctuation">,</span>{$<span class="token keyword">set</span>:{<span class="token string">"age"</span>:<span class="token number">58</span>}}<span class="token punctuation">)</span>批量修改：将表中年龄为<span class="token number">58</span>的人的性别全部修改为男：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>{<span class="token string">"age"</span>:<span class="token number">58</span>}<span class="token punctuation">,</span>{$<span class="token keyword">set</span>:{<span class="token string">"sex"</span>:<span class="token string">"男"</span>}}<span class="token punctuation">,</span>{multi:<span class="token boolean">true</span>}<span class="token punctuation">)</span>将表中姓名为张三的人删除：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token string">"张三"</span>}<span class="token punctuation">)</span>删除表中的全部数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>{}<span class="token punctuation">)</span>将表中年龄大于<span class="token number">30</span>的数据全部删除：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>{<span class="token string">"age"</span>:{$gt:<span class="token number">30</span>}}<span class="token punctuation">)</span>只删除表中年龄大于<span class="token number">10</span>的一条数据：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>{<span class="token string">"age"</span>:{$gt:<span class="token number">10</span>}}<span class="token punctuation">,</span>{justOne:<span class="token boolean">true</span>}<span class="token punctuation">)</span>查看查询语句的执行时间：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token string">"zhangsan1"</span>}<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">explain</span><span class="token punctuation">(</span><span class="token string">"executionStats"</span><span class="token punctuation">)</span> 其中executionTimeMillis就是执行时间<span class="token punctuation">(</span>ms<span class="token punctuation">)</span>创建索引：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>createIndex<span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token number">1</span>}<span class="token punctuation">)</span> 创建了索引之后查询数据就会变快查看当前表的索引：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>getIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span>删除索引：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>dropIndex<span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token number">1</span>}<span class="token punctuation">)</span>复合索引：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>createIndex<span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"age"</span>:<span class="token operator">-</span><span class="token number">1</span>}<span class="token punctuation">)</span>指定索引名：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>createIndex<span class="token punctuation">(</span>{<span class="token string">"username"</span>:<span class="token number">1</span>}<span class="token punctuation">,</span>{<span class="token string">"name"</span>:<span class="token string">"userindex"</span>}<span class="token punctuation">)</span>创建唯一索引：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>createIndex<span class="token punctuation">(</span>{<span class="token string">"age"</span>:<span class="token number">1</span>}<span class="token punctuation">,</span>{<span class="token string">"unique"</span>:<span class="token boolean">true</span>}<span class="token punctuation">)</span> 当给age创建了唯一索引后再向表中插入同样的数据就会报错删除唯一索引：db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>dropIndex<span class="token punctuation">(</span>{<span class="token string">"userid"</span>:<span class="token number">1</span>}<span class="token punctuation">)</span>创建超级管理员：<span class="token keyword">use</span> admindb<span class="token punctuation">.</span>createUser<span class="token punctuation">(</span>{    <span class="token keyword">user</span>:<span class="token string">'admin'</span><span class="token punctuation">,</span>    pwd:<span class="token string">'123456'</span><span class="token punctuation">,</span>    roles:<span class="token punctuation">[</span>{role:<span class="token string">'root'</span><span class="token punctuation">,</span>db:<span class="token string">'admin'</span>}<span class="token punctuation">]</span>}<span class="token punctuation">)</span>查看当前库的管理员权限：<span class="token keyword">show</span> users修改Mongodb数据库配置文件：在Mongodb文件夹下找到mongod<span class="token punctuation">.</span>cfg文件<span class="token punctuation">,</span>进入修改里面的security文件security:  <span class="token keyword">authorization</span>: enabled在cmd窗口上输入：services<span class="token punctuation">.</span>msc 进入mongodb的配置服务页面<span class="token punctuation">,</span>重启mongodb服务在cmd窗口上输入:mongo admin <span class="token operator">-</span>u admin <span class="token operator">-</span>p <span class="token number">123456</span> 进入超级管理员页面删除管理员：db<span class="token punctuation">.</span>dropUser<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span>创建普通管理员：<span class="token keyword">use</span> <span class="token keyword">user</span>db<span class="token punctuation">.</span>createUser<span class="token punctuation">(</span>    {        <span class="token keyword">user</span>:<span class="token string">"useradmin"</span><span class="token punctuation">,</span>        pwd:<span class="token string">"123456"</span><span class="token punctuation">,</span>        roles:<span class="token punctuation">[</span>{role:<span class="token string">"dbOwner"</span><span class="token punctuation">,</span>db:<span class="token string">"user"</span>}<span class="token punctuation">]</span>    }<span class="token punctuation">)</span>创建完成之后再退出到cmd窗口输入 mongo <span class="token keyword">user</span> <span class="token operator">-</span>u useradmin <span class="token operator">-</span>p <span class="token number">123456</span> 进入普通管理员页面修改管理员密码：db<span class="token punctuation">.</span>updateUser<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span>{pwd:<span class="token string">"12345"</span>}<span class="token punctuation">)</span>密码认证：db<span class="token punctuation">.</span>auth<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span> 在cmd窗口下直接密码认证就可以进入数据库<span class="token punctuation">,</span>注意必须先链接数据库 mongo adminnode<span class="token punctuation">.</span>js操作数据库首先先在文件夹创建一个项目：在当前目录下打开cmd窗口输入：npm init <span class="token comment">--yes</span>然后用vscode打开，在终端安装mongodb数据库：npm i mongodb <span class="token comment">--save</span>在文件夹下新建app<span class="token punctuation">.</span>js文件</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;language-sql&quot; data-language=&quot;sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;安装mongodb数据库
启动数据库：在cmd窗口下输入mongo
查看数据库：&lt;span class=&quot;token keyword&quot;</summary>
      
    
    
    
    <category term="数据库" scheme="https://yswm-m.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="教程" scheme="https://yswm-m.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="笔记" scheme="https://yswm-m.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
